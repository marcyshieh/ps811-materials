[
["index.html", "Introduction to Statistical Computing in Political Science 1 Introduction", " Introduction to Statistical Computing in Political Science Marcy Shieh 2021-01-24 1 Introduction This is a one-credit, pass/fail course for first-year PhD students at the Department of Political Science at the University of Wisconsin-Madison. Students will learn how to organize their projects using Git, connect to Github, become R-literate, use R to conduct statistical analyses and create graphics, write their documents in an R Markdown file, create a replicable R Project, and use other computings tools that may help them on their academic journey. Due to COVID-19, the course will be taught virtually during the Fall 2020 semester and recordings of the lectures will be available on Canvas to enrolled students. The first hour of the course covers everything that students need to know to complete all assignments in the class. The second hour walks through the weekly assignments and provides additional support. To balance out the effects of the virtual environment, I will try to make the class as connected as possible. In addition to regular office hours, we will have a Slack for class questions and discussion. The hope is that each student will be able to get their questions answered as soon ass possible. You may access the latest draft of the syllabus here. If you have any questions about the materials, please contact me at mshieh2@wisc.edu. "],
["setting-up.html", "2 Setting Up 2.1 Installing R 2.2 Installing RStudio 2.3 Installing LaTeX 2.4 Knitting R Markdown Files 2.5 Creating a Github Account 2.6 Setting Up Git 2.7 Connecting RStudio to Git and Github 2.8 Working with Git on RStudio", " 2 Setting Up In this lecture, you will learn how to knit a document in R Markdown and use basic Git functions. 2.1 Installing R R is a statistical programming language that is widely used in the discipline. Go to the R official website to learn more about the software. These instructions will help you download R on to your operating system. Go to list of CRAN mirrors. A “mirror” is essentially a distribution site for the software. Select your preferred CRAN mirror. I recommend that you select the mirror closest to your current location. For example, if you are in Madison, WI, you should consider picking the mirror located at University of Michigan, though any of the midwestern universities will do. Select the download for your operating system. 2.2 Installing RStudio RStudio is an integrated environment for R. If R is the engine, RStudio is the car. You can use the engine without the car, but you cannot drive the the car without the engine. In other words, you will not be able to use RStudio if you have not yet downloaded R. Always download R first. Go to the RStudio official website to learn more about the software. These instructions will help you download RStudio on to your operating system. Go to the Download RStudio page. Click on the “Download” button\" for RStudio Desktop Open Source Licnse Free. Click on the “Download RStudio for [your OS]” button. The website should be detect which version of RStudio that you need to download. 2.3 Installing LaTeX LaTeX is a software system for document prepartion. While we will not focus on LaTeX functionalities in this class, you will need to download it to compile R Markdown documents. Go to the LaTeX official website to learn more about the software. If, for any reason, you would like to learn LaTeX, I would recommend opening an Overleaf account and leveraging their step-by-step tutorial. While this course will primarily focus on teaching you how to write and generate your documents in R Markdown, you may encounter collaborators who use LaTeX. The good news is that R Markdown is pretty similar to LaTeX, so the skills are definitely transferrable. These instructions will help you download LaTeX on to your operating system. Scroll to the third section of the Get page where you see download options for Linux, MacOS, Windows, and Online. Select your operating system. For MacOS users, you should download MacTeX. You may access step-by-step instructions here. For Windows users, the website suggests that you download MikTeX, proTeXt, or TeX Live. There is a StackExchange post discussing these options and then some. It appears like most people recommend TeX Live. 2.4 Knitting R Markdown Files Open RStudio. Click on File &gt; New File. Select R Markdown. new rmarkdown When you set up a new R Markdown file. Make sure the sidebar is set to “Document.” Enter in the title of the document in the “Title” field and your name in the “Author” field. Select HTML as the “Default Output Format” option for now. We will discuss how to output your file in PDF as well later in the lesson. An R Markdown document (with the extension .Rmd) will appear. It will be called Untitled1.Rmd. R Markdown has a default template in place every time you create a new R Markdown document. the knit button The Knit button. As you have selected HTML as the default output format, when you click the Knit button (it is the icon with a little ball of yarn and needle), it will automatically output the document as a HTML. Prior to outputing the HTML file, however, it will ask you to rename the file to something other than Untitled1.Rmd, which you should certainly do. viewer tab HTML file in the viewer tab. The HTML file will appear on the “Viewer” tab. To open the actual document, click on the button with the arrow pointing to the top right corner. To output the same document as a PDF, click on the small down arrow next to the Knit button. Select “Knit to PDF.” As you can see, you have the option to “Knit to Word” but the political science community has recently turned on Word. As such, you are discouraged from knitting to Word, unless otherwise noted. 2.5 Creating a Github Account Github is a website that hosts software development and version control via Git. While you are welcome to use Github alternatives to host your open-source projects in the future, this class will use Github. Create an account on Github. With the GitHub Student Developer Pack, students get Github Pro and many other computing tools for free. You will need to use your university email address to apply, but the application process only took me a few minutes. Review the full list of Github Pro features here. 2.6 Setting Up Git Git is a version-control system for tracking changes. Initially, software developers were the main users of Git. But lately, people of all stripes have adopted Git into their workflow. Git is especially useful for collaborative work because you will be able to identify information about edits to a file, including what changed, who made the change, and when the perrson made the change. Git is useful for solo work as well because it beats saving your document as a new document whenever you make a change. Visit the official Git website to learn more about Git. The official Git website has a helpful guide on installing Git for your operating system. I don’t think I can improve on their existing guidance other than the fact that I do not recommend that you download from the source. 2.7 Connecting RStudio to Git and Github Much of this section is indebted to Happy Git and GitHub for the useR page on integrating RStudio with Git and Github. Since I spend the better part of my life in RStudio, I want it to be able to connect to everything, including Git and Github. You are welcome to use SourceTree and other Git clients, but I prefer to consolidate all my work into my trusty RStudio environment due to convenience/laziness. As such, my lectures will simply assume that you use Github and RStudio and not their alternatives. Of course, you are welcome to expore the alternatives in your free time. In fact, I highly recommend that you do so because I want you to end up with a workflow that works for you. The good news is, once you start familiarizing yourself with these basic building blocks, other tools will be easier to pick up. 2.7.1 Say hello to git on RStudio terminal tab Terminal tab in RStudio. Click on the Terminal tab in RStudio. Enter the following commands into the Terminal (i.e., also known as “the shell”) and click “Enter.” You may copy and paste all three lines at once then click “Enter,” or type each line one by one, clicking “Enter” each time you need to start a new line. git config --global user.name &#39;Your Name&#39; git config --global user.email &#39;yourgithub@email.com&#39; git config --global --list You have “introduced” yourself to Git. Hopefully this is the beginning of a beautiful friendship. 2.7.2 Create a repository Go to the main Github site and make sure you are logged in. On the main page, click on the green “New” button on the right sidebar to create a new repository on Github. On the “Create a new repository” page, enter the following: Repository name: ps811-exercises Description (optional): You can enter some description here about your folder, such as “assignments for ps811” Select “Public” for now, though you do have the option for “Private” for future repositories. Check “Add a README file.” Click on the “Create repository” button. Your repository has been created. 2.7.3 Connect Github to RStudio (the fun part) The process technically clones the Github repository to your computer, but so much of the magic happens in RStudio that it feels that I am connecting Github to RStudio. Go to RStudio. Go to File &gt; New Project. Select “Version Control.” Select “Git.” Go to Github. Find the Git repository that you created in Step 5. Click on the “Code” button (in green). Copy and paste the URL under “Clone with HTTPS.” The URL will end in .git, e.g., https://github.com/marcyshieh/ps811.git. git pane New project pop-up form. Go back to RStudio and fill out the following: Repository URL: The .git URL you copied in Step 10. Project directory name: This will default to whatever you named your Github repository. You can change it, or you can keep it the same for consistency (or, so you won’t be confused). Create project as a subdirectory of: Find the directory on your computer that you want this copy of your Github repository to live in. Check the “Open in New Session” box so you can have your projects (and misc non-project files) in different RStudio windows, but this is not necessary. Click “Create Project.” 2.8 Working with Git on RStudio You should see all the files from your Github repository in the RStudio file browser pane. This means that everything has been cloned from your Github repository to your computer or, in other words, downloaded. 2.8.1 How does this all work? In the file browser pane, open README.md. Type in whatever you want in the file. A joke, the name of your celebrity crush, your favorite Riverdale character. Whatever you want, as long as it’s not rude and/or incendiary. Save the file. the git pane The Git pane. Click on the Git tab on the upper right pane. The Git tab only shows up once you create an RStudio Project. You will see that the README.md filepath you just edited show up under the Git tab. The Status will be a “M,” which stands for “Modified.” Check the “Staged” box. Click Commit. The “RStudio: Review Changes” window will appear as a pop-up. Essentially, this allows you to validate whether or not you want to push the changes you made on your computer to your Github repository. Type a coherent commit message into the “Commit message” box. Click “Push.” A “Git Commit” pop-up will appear, with a message that kind of looks like this: &gt;&gt; git commit -F blahblahblah.txt [master beded87] edit edit 1 file changed, 49 insertions(+), 2 deletions(-) 2.8.1.1 Review changes deep-dive 3 panes The 3 panes of RStudio: Review Changes. There are 3 panes, which I will introduce in clockwork order: Pane 1 The files you changed. Pane 2 Commit messsage textbox. Here, you write some notes on what you changed. I am personally horrible at writing commit messages because I get impatient and lazy—I honestly just want to write, “I changed some stuff”—but that really negates the whole purpose, doesn’t it? So let’s make it our goal to get better at writing commit messages. Pane 3 The large pane on the bottom that show the changes you made. New additions are in gray, deletions are in red, and replacements are in green. You have the options of “stage chunk” or “discard chunk” for each gray, red, and green highlight. Stage chunk: You will be confirming the change and pushing the change out to the Github repository. Discard chunk: You will NOT be confirming the change annd you will NOT be pushing the change out to the Github repository. You may also “Stage All” or “Discard All.” 2.8.2 Check if things happened as expected Return to your browser, go to Github, and find your repository. If you never left your repository, click “Refresh” on your browser. Click on the README.md file—though, to be honest, your Github repository defaults to the README file when you land on the repository. But click on it anyway. On this page, you can see who contributes to the file (it should be you for now) and when it was last udpated. history Github repository history The “History” button allows you to see who last updated the file, when, and which client they used to update the file. For each “commit,” there are three icons (from left to right): a clipboard, an ID number, angle brackets. Clipboard: This copies the SHA-1 and puts it on your clipboard. I wouldn’t worry too much about it. ID number: This takes you to the gray, red, and green highlights that indicated the changes at the time of the commit. Angle brackets: This takes you to the repository at the time of the commit. A time machine, basically. 2.8.2.1 Viewing history in RStudio You may also view the history in RStudio. history-rstudio How to access History in RStudio. history-window Window featuring Git History in RStudio. 2.8.2.2 Deleting the Repository If, for any reason, you would like to delete your repository, you should follow the steps below. Local Find the directory on your computer and delete it like you would delete any normal folder. Github Go to the browser, go to Github, find your repository, and click “Settings” on the top repository-specific menu. Scroll all the way to the bottom and click on the “Delete this repository” button, then follow the instructions. "],
["workflow.html", "3 Workflow 3.1 Why create a project? 3.2 Creating a project in RStudio 3.3 Pushing a R Markdown document to your Github repository 3.4 Writing a paper in R Markdown 3.5 Let’s talk about code chunks 3.6 Code chunks in the papaja template 3.7 Body of the papaja template", " 3 Workflow In this lecture, you will learn how to do everything you already do as a scholar but in a more organized and efficient manner. More specifically, you will learn how to do all these things in RStudio. 3.1 Why create a project? You are probably used to storing all your project-related files in a project folder on your computer. And, you may tell yourself that if you wanted to send all the files to your collaborator, you can zip that folder up and upload everything on to your Box or Dropbox. Then your collaborator can unzip that folder, work on some files, and re-upload the files. But then you don’t know which parts she edited unless you read her email, which might be detailed, but also might not be! You want to be prepared for the latter. So this is why creating a project in RStudio and connecting it to GitHub is important. All project files will be in a central location and all collaborators will go to the same central location. There is no convoluted re-uploading and downloading of any sort where edits may get lost in the process. And, if you have no collaborators, you will be able to track your own work carefully so if you were ever to invite someone to review your project or bring on a collaborator, it wouldn’t be much of a hassle. You also want to think ahead: many of the top journals in the discipline require you to provide replication files. Instead of having to go back and retrace your steps, you can just provide your R Project directory. In essence, whoever has access to your R Project directory will be able to replicate every step that generated the final paper and results. So let’s get started. 3.2 Creating a project in RStudio The goal of this section is for you to be able to create a project in RStudio that you can connect to Github. Some of these steps are a review of what we learned in the previous lesson. Log in to GitHub, if you are not already logged in. Click on the green “New” button to create a new repository. On the “Create a new repository” page, enter the following into the form: Repository name: ps811-project Select “Public” Check “Add a README file” Open RStudio. Go to File &gt; New Project. Select “Version Control.” Select “Git.” Go to GitHub. Find the Git repository that you created in Step 3. Click on the “Code” button (in green). Copy and paste the URL under “Clone with HTTPS.” The URL will end in .git, e.g., https://github.com/marcyshieh/ps811.git. Go back to RStudio and fill out the following: Repository URL: The .git URL you copied in Step 8. Project directory name: This will default to whatever you named your Github repository. You can change it, or you can keep it the same for consistency (or, so you won’t be confused). Create project as a subdirectory of: Find the directory on your computer that you want this copy of your Github repository to live in. Check the “Open in New Session” box so you can have your projects (and misc non-project files) in different RStudio windows, but this is not necessary. 3.3 Pushing a R Markdown document to your Github repository In the previous lesson, you took the README.md file from your Github repository, edited it, and pushed your changes back on to the repository. In this lesson, you will learn how to create a document on your computer in RStudio and push it to the repository. Go to File &gt; New File &gt; R Markdown. Enter a sample title for “Title” and your name for “Author.” Select PDF as the default output format. This file should look familiar to you. It is the same default R Markdown template you knitted in the previous lesson. Go to File &gt; Save As and make sure you are in the ps811-project directory. Once you confirm that, you can save it as an .Rmd file, such as example.Rmd. Knit the file as a PDF. Push the directory onto your GitHub repository. Go to the “Git”\" pane. Click “Commit.” Check “Staged” for the .gitignore, ps811-project.Rproj, sample.Rmd, and sample.pdf files. Type a commit message on what changes you made so you (or your collaborators) can note what happened. The .gitignore file contains files that Git should ignore. In this case, RStudio produces some metadata (e.g., logs) when you create and revise files, but Git defaults to ignoring those files, i.e., not pushing changes to their on to your GitHub repository. If, in any case, you want to tell Git to not ignore certain R-generated files, you can always open up the .gitignore file and edit it to not ignore those files. Click the green “Push” up arrow. repository This is how your repository for ps811-project should look like. Go back to GitHub on your browser and click on your ps811-project repository. (Refresh if you never left the repository page.) You should be able to see your .gitignore, ps811-project.Rproj, sample.Rmd, and sample.pdf files in your GitHub repository. files-pane Delete files from your files pane. But you don’t really need sample.Rmd and sample.pdf in your repository. So you want to delete it from the directory on your computer and the repository on GitHub. Go ahead and check the boxes next to sample.Rmd and sample.pdf in the “File” pane. Then, click “Delete.” git-pane-delete Your Git pane should look like this once you delete your files from the directory in your computer. Your Git pane should show sample.Rmd and sample.pdf with little red “D” statuses next to them (D for Delete!). Go ahead and click commit, stage these changes, write a commit message, and push. Go back to GitHub on your browser and click on your ps811-project repository. (Refresh if you never left the repository page.) The two files you just deleted—sample.Rmd and sample.pdf—are now gone. Because you deleted them. commits Click on the [#] commits link to see the history of your repository. Your files are gone but not forgotten. The great thing about Git is that you can go back and look at the files you deleted and retrieve them if necessary. Go to the counter-clockwise clock icon and click on the “[#] commits” link. commits-page This is the commits page. There, you will see the record of your changes and can click on the icons (as discussed in the previous lesson) to review or retrieve anything you deleted. 3.4 Writing a paper in R Markdown Now you are hopefully more comfortable doing simple things with RStudio, R Markdown documents, Git, and GitHub. So now let’s move on to how to do stuff that you already do and figure out how the Git workflow (in conjunction with RStudio) can make it better. When you write papers for your classes, you want to write it with the hope that it will turn into a publishable paper. That is the goal, anyway, so let’s strive for it. Political science manuscripts use the APA style so you want to find a template that conforms to that style. There are many R Markdown templates out there, even specific templates for specific journals, and there are certainly ways you can customize templates to your heart’s desire. When you create a new R Markdown document, you can select “From Template” from the sidebar and see what has already been pre-loaded. For the sake of catering to everyone’s needs, we are going to work with the papaja R package. papaja, as you may have easily guessed, stands for “preparing APA journal articles.” It’s a package that’s currently in the process of being developed so there might be some kinks here and there (though I haven’t encountered any in my own work). Ultimately, this lesson is to give you a sense of how R Markdown templates work so you go out and explore on your own. 3.4.1 Prerequisites Just so you know what is required to run the papaja R package, I’m going to do a breakdown for you. You should have fulfilled all the prequisites if you completed the previous lesson. To install papaja, you need to install R, which you should have already done. If not, what have I been doing this whole time…? You also need to install pandoc, which you should have if you already installed RStudio. Pandoc is a document converter that is pretty versatile and can convert a file from one format to the other pretty easily. It’s worth checking out sometime. But for now, we just need it for papaja to work. You need a TeX distribution, which you already do, from installing LaTeX in the first lesson. 3.4.2 Installing papaja papaja is not yet available on CRAN (the Comprehensive R Archive Network), so you need to install it from the creator’s GitHub. To do so, you need to install the devtools package by entering the following into your console. install.packages(&quot;devtools&quot;) Once you install a package to your computer, you do not have to install it again, unless you update to a new version of R. You can check your installed packages with the installed.packages() command. Access the package you just installed by entering the following into the console. library(devtools) Think of this as telling your computer to point and click on a program to “open” it. You need to do this every time you open a new R session and wish to use the package—in the same way that you need to click on the RStudio icon every time you want to use it. Enter the following command into the console. This installs the stable development version of the package from Github. devtools::install_github(&quot;crsh/papaja&quot;) The devtools:: part of the command simply tells R where the install_github part of the command is coming from. There are cases where you may have loaded two packages and both packages have install_github as a command. Doing the double-colon simply ensures that you are specifying the package that the command is coming from. Since you have only loaded the devtools package so far, you don’t need to specify that install_github is coming from the devtools package, but I just wanted to demonstrate this point in case you ever end up in such a conundrum. 3.4.3 Opening the template Go to File &gt; New File &gt; R Markdown. apa-article Select APA article (6th edition) from the menu. Select “From Template” from the sidebar and select “APA article (6th edition)” on the list. As you can see, it tells you that this template is from papaja package. Click OK. template This is how the template should look like. The template appears. 3.4.4 Getting to know your APA R Markdown template Lines 1 to 64 is a form-like feature that you can fill out with your own information. This is called a YAML front matter, which you can read more about on your own time. Basically, it’s basically a form you can fill out to define what should be going on in the back end. Most of these fields should be pretty self-explanatory, but I’d like to point out a few things. Line 49 To figure out word count, I recommend the wordcountaddin package. Not only does it tell you how many words and characters are in your document, but provides some information on the readability of your statistical tables (e.g., regression tables) as well. I suggest not being too worried about this right now, but it is worth thinking about now. Line 51 papaja comes with a “r-reference.bib” file for all your R Markdown documents. You should see the file on your “Files” pane. Your bibliography will live in the .bib file. I’ll talk more about .bib files later. Lines 53-59 may sound ambiguous, but the official papaja page has definitions for each field on their Rendering Options section. 3.5 Let’s talk about code chunks Put your R commands in a code chunk. With code chunks, you are basically telling RStudio, “hey, i need you to run this.” Code chunks look like the following. ```{r} # insert R code here ``` Of course, you can customize what you do tell your code chunks to do. Here are some examples, but for the full list of options, check out the R Markdown Cheat Sheet - Section 5: Embed Code. include = FALSE tells R to run the code in the background but NOT show the results or the code on the R Markdown document. This is helpful if you want to show results in a chunk later in the file, but you want to run some commands in the current chunk. ```{r include = FALSE} # insert R code here ``` echo = FALSE tells R to run the code in the background and not show the code in the R Markdown document, but to show the results. This is helpful for tables and graphics. ```{r echo = FALSE} # insert R code here ``` message = FALSE tells R to not show messsages generated by the comamnds in the code chunk. For instance, some packages might provide some messages (e.g., citations) but you do not want it to show up in your R Markdown document. ```{r message = FALSE} # insert R code here ``` fig.cap = \"...\" tells R to add a caption to your figure. You simply replace ... with the caption. ```{r fig.cap = &quot;This is a photo of all my favorite NYC brownstones.&quot;} # insert R code here ``` You may combine these options by separating them with a comma. ```{r echo = FALSE, fig.cap = &quot;This is a photo of all my favorite NYC brownstones.} # insert R code here ``` You may even name your chunks. In this example, the code chunk is named “chart.” Note that you do NOT separate the r and the name of your chunk with a comma. ```{r nycbrnst, echo = FALSE, fig.cap = &quot;This is a photo of all my favorite brownstones.&quot;} # insert R code here ``` Now that you have an understanding of code chunks, let’s explore the code chunks on the R Markdown template we downloaded. 3.6 Code chunks in the papaja template Lines 66-69 is where you put your packages. As you grow into a proficient R user, you are going to use many packages (not just devtools!) and you should load them all in a section that looks like this. In other words… ```{r setup, include = FALSE} # load your packages using the library() function # load your .bib file using the r_refs() function ``` Lines 71-75 are where you can set your analysis preferences. The default appears to be code that sets a seed for a random number generator. You may need a seed when you run a say, k-means clustering algorithm, but I wouldn’t worry too much about it right now. 3.7 Body of the papaja template Lines 79-94 shows headings for the document. This is how the headings will look like based on the number of hashes (#) they put. A good way to think about it is # is a the largest heading, and every # you add on makes the heading smaller. For a comprehensive list of headings, check out check out the R Markdown Cheat Sheet - Section 3: Markdown. # Methods (one hash - #) ## Participants (two hashes - ##) ## Material (two hashes - ##) ## Procedure (two hashes - ##) ## Data analysis (two hashes - ##) # Results (one hash - #) # Discussion (one hash - #) Now, you can create headings and subheadings and subsubheadings, etc. Lines 97-106 is the last few pages of the document, which will be devoted to the bibliography. And much of the end of this template is some TeX markup language, which dominates LaTeX but is only sometimes used in R Markdown documents. You don’t have to change any of this, but here is some background on the building blocks. \\newpage command just creates a new page and comes from the TeX language. \\begingroup begins a group and \\endgroup ends a group. In essence, you’re putting stuff in a box. So you’ve built your box. Within that box, you want your bibliography to indent a certain way. With \\parindent, you are indenting the first line of a paragraph (i.e., each new line) and with \\leftskip, you can reduce the paragraph size from the left. The grouping and the formatting are for the bibliography, which the template inserts with the following HTML code. This template handles the bibliography style using HTML/CSS, but this might not be the case with all templates. &lt;div id=&quot;refs&quot; custom-style=&quot;Bibliography&quot;&gt;&lt;/div&gt; In the next lesson, we will discuss how to customize your bibliography. "],
["bibliography.html", "4 Bibliography 4.1 Downloading Zotero 4.2 Downloading Better Bibtex for Zotero 4.3 Loading the citr package", " 4 Bibliography In this lecture, you will learn how to organize a bibliography within your workflow. 4.1 Downloading Zotero You are going to read a lot of things and cite a lot of things in graduate school. And not only that, you will need to organize all your documents so your prelim studying won’t be a mess. I recommend using Zotero to organize your bibliography and creating an account on Zotero so you can access your bibliographies anywhere. You are, of course, free to use other reference organizers, but I will use Zotero to go through these examples. Zotero is pretty user-friendly. Once you open it, most of the buttons are pretty self-explanatory. You can create new collections, new groups, etc. (i.e., a collection can be Fall 2020, and a subcollection can the name of a class). You may tag an article with relevant categories, add a note, etc. Once you have your folders all set up, you can just drag in a PDF into Zotero. Zotero will generate metainfo from most PDFs that you download from JSTOR or another catalog from the UW-Madison library, but in cases that the metainfo does not show up, Zotero makes it easy for you to enter in the fields yourself. 4.2 Downloading Better Bibtex for Zotero To make sure that you can translate the information from Zotero into information for the reference page in your R Markdown file, you will need to download Better BibTeX for Zotero (BBT). Go to BBT GitHub and download the zotero-better-bibtex-5.2.63.xpi file. If you use Firefox, you need to right click on the .xpi link and select Save As. Follow the instructions on the BBT installation page. When you restart BBT, there will be a pop-up window tiutled “Welcome to Better BibTex for Zotero.” Click “Continue.” Select “Use the BBT default citekey format” (by default). Click “Continue.” Check “Enable drag-and-drop-citations” (by default). Click “Continue.” Check “Unabbreviate journal names on import” and “expand (???) journal names on import” (by default). Click “Continue.” There’s some information about exporting using BBT. Read and make sure that in the future, instead of choosing “BibTeX” for your Zotero exports, you can pick “Better BibTeX,” and click “Continue.” Click “Done.” You’ll be prompted to restart Zotero again. Just upload a PDF copy of a journal article from one of your classes to Zotero. 4.3 Loading the citr package Install the citr package in the console. install.packages(&quot;citr&quot;) library(citr) Restart RStudio. Reopen your project. Place your cursor on line 80 (under the Methods section). addins Addins button on the far right of the menu. Now click on the Addins button on the top of your RStudio. You should be able to see a section for CITR and selection an option to “Insert Citations.” Go to “Settings” (bottom of pop-up window). citr-settinngs Check the settings and make sure they match. Your parent document should be document.Rmd and you should add references to r-references.bib. This might be set automatically but if not, make sure these are the fields. Return to “Insert Citations” (bottom of pop-up window). Enter (or start entering) the title of the article you dragged into Zotero. It should show up in the search so you can just select it. You have the option to add the citation with parentheses (e.g., (Author, 1999)) or without parentheses (e.g., Author (1999)). Click “Insert Citation.” Go to your “Files” pane on RStudio and click on the r-references.bib file. On line 16, you will see that they created the citation for you. Now when you knit the file to a PDF, the citation appears under the Methods section of your PDF! You may use the Zotero Chrome extension to add any article from your Chrome browser to your Zotero article. If you add a new article to your Zotero library, it may not show up on citr unless you restart R. citr Addins is admittedly a bit janky and if you would prefer to enter the commands on the console manually, you are welcome to read the citr R documentation. Finally, push all your files out to your repository. Do the steps from memory. If you don’t remember them, go back and look at the steps. Once you have successfully pushed all the files to the repository, they should show up in your ps811-project GitHub repository. "],
["git-branches.html", "5 Git Branches 5.1 Creating a branch 5.2 Working in the branch 5.3 Deleting the branch 5.4 Restoring the branch 5.5 Using Git on the command line", " 5 Git Branches In this lecture, you will learn how to create and utilize git branches. So far, you have been pushing all your files to the master branch. And that’s fine when you are working on your own. But not so fine when you are working with other people! The master branch is the front-facing view of your project. You can think of it as the latest “complete” version of the project, or the most up-to-date version of the project. You may not want all your works in progress to show up in the master branch, especially when decisions are still being made about certain aspects of the project. This becomes more crucial when you are part of a team. One way to make sure that your collaborators do not overwrite the master branch with their changes without team approval is to have a branch that essentially clones the master branch but acts as a “workspace” for any revisions. This is especially helpful when each individual in a team is assigned a specific task to work on. They could do so in their own branch before merging all the results together. This might be a relatable example: You have a personal statement for graduate school named main_personal_statement.docx. You send the document to your former advisors. Your advisors read the statement and send you a version of document with tracked changes called main_personal_statement_their_initials.docx. You want to be able to implement all their feedback into one document, so you open up each of document you get back and implement the feedback in the main version of the document. With branches, each of your advisors could have worked in a branch, and you could have determined which parts of the duplicate version could be merged back into the main version. In this lecture, I will go through how to work with branches in the RStudio environment. 5.1 Creating a branch Open your ps811-project in RStudio. Click on the “branch” icon in the Git pane. git new branch New branch: test. In the “New Branch” pop-up, name your new branch “test.” git branch pop-up Git Branch pop-up. The Git Branch window will pop-up, creating your new branch. 2 branches RStudio Git pane takes you to the “test” branch. RStudio should have automatically transported you to the new branch on your Git pane. git branches Git branches on GitHub. Go to the GitHub of your ps811-project repository. You should be able to see a branch called test in the branch dropdown menu. Next to it, GitHub should tell you that there are 2 branches within your project. 5.2 Working in the branch You are now in the “test” branch. Go to the Files pane and select the document.Rmd file. Make some edits to the document.Rmd file. Whatever you want! Commit, write a commit message, and push. Do what you always do to push something to your repository. recent push Recent push to repositorry. Go to your GitHub repository. You should see a banner that there has been a push to your test branch. Click on the “Compare &amp; pull request” button. git open pull request Open pull request. On the “Open a pull request” page, make sure you are pulling the “test” branch to the “master” branch. Check if they are able to merge. There could some changes that are too different to merge, but it should not be the case for you right now. If you scroll down the “Open a pull request” page, you can see what changes were made. This tells you exactly what files were changed and where the changes occurred. Scroll back up to the form. create pull Create pull request. Click on the down arrow next to the green “Create pull request” button. You will see two options: “create pull request” and “create draft pull request.” Create pull request: this is the default option. This simply tells whoever is “in charge” of the repository that it is ready to be reviewed and merged. This hierarchy lends itself well to a team where there’s some sort of supervisor. Create draft pull request: this is the second option. This allows your team to review and comment on it before your supervisor sees it. I wouldn’t worry too much about this option right now. Click on “Create pull request.” (You can leave a comment if you want.) create merge Merge pull request &gt; Create a merge commit This should take you to the “Pull Requests” page. You will see one pull request open. You will see three options: “create a merge commit,” “squash and merge,” and “rebase and merge.” Create a merge commit: this is the default option. This merges your changes on the test branch to the master branch. Squash and merge: this combines your changes in the test branch into one commit and pushes it out to the master branch. Rebase and merge: this adds the entire history of the test branch onto the master branch and commits your changes. Don’t worry about this one, but if you would like to read more about it, Atlassin Bitbucket has a helpful summary of differences between “merging” and “rebasing.” Click on the default, “Merge pull request.” Click “Confirm merge.” create pull request success Pull request success message. You will receive a message that “Pull request successfully merged and closed.” You should be able to see your recent commits from the test branch transferred to the master branch. 5.3 Deleting the branch There may come a time where you might want to delete your branch. How would you go about it? Click on the “# branches” link. your branches Your branches. Click on the red trash on the far right to “test” under “your branches.” 5.4 Restoring the branch The great thing about Git is that, even if you accidentally delete a branch, you can always restore it. create merge Pull requests link. Click on “Pull Requests.” 2 closed There are 2 closed branches within your repository. Click on “# closed.” Select the “Test” repository. Click on the “Test” repository. restore branch Restore branch. Scroll near the bottom of the page and click on the “Restore branch” button. Go back to the ps811-project main page. You should see “test” restored as a branch. 5.5 Using Git on the command line There are a wealth of other things Git can do, and you will find a wealth of resources about Git online. Many of the resources you encounter will pertain to using Git with the command line, which is how software developers have traditionally used it. You may want to familiarize yourself with that, as many of the help resources tend to be specific to Git command line functions, not RStudio functions. RStudio provides a good jumping off point, though. The Git pane in RStudio opens a shell that takes you to your exact project. In essence, the shell is a tool that allows you to type in commands that tell the computer what to do. In this case, you can type in all the Git commands you need to do without having to go back and forth in the RStudio and GitHub environments. The Git Cheat Sheet provides pretty good guidance on Git commands. I will walk through a command line example with you that shows you how to commit and push a file into your repository using the command line. You should already be pretty familiar with the process at this point, so none of the inputs and outputs should not be a surprise to you. Go to RStudio. Open the document.Rmd file. Make some edits to the file. Whatever you want!! Knit the file to a PDF. See the edits you made in the .Rmd file show up in the PDF. git-shell Open the Shell through the Git pane on RStudio. git-shell-open The shell opened. In MacOS, it’s called a “Terminal” (featured here). In Windows, it’s called a Command Prompt. They’re equivalent. Now open up the Shell. git-status Check out the Git status on the shell. Type git status into the command line. You should see information in the shell that mirrors the information in the Git pane. git-add Add, i.e., stage all the files. Type git add . into the command line. This tells the computer that you want to stage all the changes (git add) in the ps811-project directory (. represents the directory you are currently in). The Git pane reflects this change without you having to check all the boxes. If you do not see the expected changes on your RStudio Git pane, just click on the RStudio window to make it active again and you will see the changes. git-reset Reset, i.e., unstage all the files. Type git reset . into the command line. This tells the computer that you want to unstage all the changes in the ps811-project directory. The Git pane reflects this change without you having to uncheck all the boxes. git-add-doc Stage the document.pdf file. Type git add document.pdf into the command line. This only stages the document.pdf file. git-commit Commit document.pdf and see what happens to the Git pane on RStudio. This means that the test branch (the branch you are working in) has one more commit than the master branch. Which makes sense, because you just made a commit on the test branch. Type git commit -m \"&lt;your message&gt;\". This allows you to commit the file and type a commit message. From my example, my commit message is, pdf changes only, but you are welcome to write what you want. git-push Push the document.pdf file. Type git push. This is akin to pushing the green push arrow icon in RStudio. Go to the ps811-project repository on GitHub. Go to your test branch. You will see that your document.pdf has just been updated a few seconds ago. git-commit-others Commit the document.Rmd and document.tex files. Go back to the Shell. You still have document.Rmd and document.tex in limbo. Commit both files and push. git add . git commit -m &quot;i am committing both document.Rmd and document.tex right now&quot; git push git-branch-repo View all the branches in the repository. Go back to the Shell. Type in git branch. It will show all the branches in your ps811-project repository and the branch you are currently in—the test branch—will be denoted by an asterisk (*). In my operating system, it’s showing up as neon green text. git-checkout-master Go to the master branch. Type in git checkout master. git checkout master is the equivalent of switching from the test branch to the master branch on the GitHub repository. git-merge-test Merge the test branch with the master branch. Type in git merge test. This merges everything from the test branch to the master branch. git merge test is kinda equivalent to opening a pull request and creating a merge on the GitHub repository. git-push-final The final push. Type in git push. This pushes the merge out into the master branch of your GitHub repository. git push at this point is kinda equivalent to confirming the merge on the GitHub repository. This is to make sure the two branches (test and master) are even, or the same. Most of you might not be comfortable with the command line yet and would prefer the point-and-click ease of RStudio, and that’s okay! This is your workflow and you should choose to work in a way that makes you the most comfortable. You may want to expedite your workflow someday, and this option is here for you if you want it! "],
["functions.html", "6 Functions 6.1 Loops 6.2 Applying lapply() 6.3 Indexing your list 6.4 Scoped verbs 6.5 Nesting data frames", " 6 Functions In this lecture, you will learn how to use R functions, such as loops, apply, lists, scoped verbs, nesting, and mapping. These R functions are often a neglected part of contemporary R education, but they can be useful and you will encounter them in PS 812 and the machine learning course. As more R users begin to rely on packages, the need to write their own functions may seem irrelevant. However, it’s good to know what kinda happens within the black box of a package. Much of the material here is inspired by Rebecca Barter’s purrr tutorial, Mike DeCrescenzo’s Functional Programming in R lesson, and the R for Data Science section on iteration. 6.1 Loops Say you want to repeat the same thing multiple times for n observations. Most specialized R packages do this for you without you having to design the loop, but we are just going over loops so you can get an idea of how they work. Loops can be kind of slow, and usually a loop in R is way faster in Python and other programming languages. I do want to say that you will use loops in PS 812 and the machine learning class. Here is a simple loop so you can get the basic idea of what a loop does. for (i in 1:10) { print(i) } You should end up with an output that shows 10 vectors with one number in each vector. Each number is a number from 1 to 10. What you are doing here is: for (i...) you are calling the element i for (i in 1:10) vector 1:10 is contained in the element i print(i) you want to do an operation that uses i, in this case, you are just printing everything in i 6.1.1 Using loops in a dataset Say you want to use loops with your dataset. We are going to do some loop examples with the datasets native to R. You can access them by typing in data(). We are going to use the iris dataset. You can take a look at the iris dataset by typing View(iris). Knowing that R has native datasets can be helpful if you want to ask a question on an online forum and need to provide replication data. Your dataset might be proprietary or you may not want to upload your dataset onto the forum post. In these cases, you may simply refer to the datasets native to R. The following loop tells R to count the number of columns per row. # create a container # your results will be numeric but you want to make sure R knows that columns_loop &lt;- numeric() for (row in 1:nrow(iris)) { columns_loop[row] &lt;- length(iris[row, ]) } # you will find that for every row, there are 5 columns, which checks out 6.1.2 Vectorizing the process You can speed up this process by vectorizing it. columns &lt;- apply(X = iris, MARGIN = 2, FUN = length) apply() is a function that appliesa function over rows or columns of a grid/array and makes it really helpful when you are working with matrices X = iris refers to the dataset MARGIN = 1 refers to the number of columns in every row (MARGIN = 2 refers to the number of rows in every column) 1 = rows, 2 = columns FUN = length refers to the function that is being applied. In this case, we are applying the length function, which simply tells you how wide (columns) or long (rows) the dataset is. You can learn more about the apply function (and many others) by typing in ?apply. 6.2 Applying lapply() You can just turn a data frame into a list. The iris dataset is a dataframe. You can turn it into a list. iris_list &lt;- as.list(iris) # check out the list iris_list # check out the first five observations of the list lapply(iris_list, head) You can also create your own lists. list(colors = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), food = c(&quot;pizza&quot;, &quot;sushi&quot;, &quot;burger&quot;), drink = c(&quot;coffee&quot;, &quot;tea&quot;, &quot;juice&quot;)) 6.3 Indexing your list str(iris_list) str allows you to display the structure of R objects, including information on the type, the number of columns, the number of rows per column, the number of factors per column, etc. str(iris_list[1]) The [1] allows you to specify the first column. In this case, that first column is Sepal.Length. You may also double index. Each time you index, you get to a deeper level of the object, whatever it might be. Of course, the iris data may not be the best example, but here is a nifty tweet for you to understand indexing better. There is also tapply(), which allows you to apply functions to groups of data. In this case, you will be applying the mean function to each species. As such, in base R… tapply( X = iris$Sepal.Length, INDEX = list(iris$Species), FUN = mean, na.rm = TRUE ) You can do tapply() using Tidyverse in a way that is a bit more intuitive. iris %&gt;% group_by(Species) %&gt;% summarize( mean_nom = mean(Sepal.Length, na.rm = TRUE) ) 6.4 Scoped verbs There are functions you can use with the dplyr and purrr packages, which you should install and load. You want to familiarize yourself with these “scoped verbs”, or “apply functions.” if: apply functions to variables that fulfills certain conditions (i.e., appy this function if this is true) at: apply functions to specific variables (i.e., apply this function at this variable) all: apply functions to every variable (i.e., apply this function at all variables) 6.4.1 Using if() If the column contains numeric values, replace each cell with the length of the data frame. I am using length because it is a function you are already familiar. iris %&gt;% mutate_if( .predicate = is.numeric, .funs = length ) You can select variables that have numeric values. You can replace is.numeric with other R data types. Here is a list of basic data types in R. select_if(iris, is.numeric) 6.4.2 Using at() The following command allows you to: only use the function on variables that start with “Sepal” divide each number in that variable by 100 select the variables that start with “Sepal” iris %&gt;% mutate_at( .vars = vars(starts_with(&quot;Sepal&quot;)), .funs = function(x) x / 100 ) %&gt;% select(starts_with(&quot;Sepal&quot;)) 6.4.3 Defining your own functions You can create your own functions! Below, I create a function where I divide a number by 2, or split it in half. make_half &lt;- function(x) { return(x / 2) } make_half(88) Output should be 44. 6.4.3.1 Anonymous Function You can also create a function using sapply and not name it. This is called an anonymous function. You just use it once and move on. sapply(88, function(x) x / 2) 6.4.3.2 Simple lambda function You can create a “lambda function,” which also goes by the names of a “quosure-style” function or a “purrr-style” function. It is similar to an anonymous function. select_if( iris, .predicate = ~ sum(is.numeric(.)) &gt; 0 ) In this case, you are: selecting from the iris dataset if the variable is numeric variable(s) will only selected if the number of is.numeric variables is larger than 0 6.4.3.3 More complex lambda function iris %&gt;% mutate_at( .vars = vars(Sepal.Length, Sepal.Width), .funs = ~ . / 100 ) Here, you are replacing function(z) with ~ and call z with .. 6.4.4 Applying more than one function summarize_all( iris, .funs = list(uniques = ~ n_distinct(.), obj_type = class) ) Here, you are looking at the iris dataset and applying the following two functions: the number of distinct numbers per variable n_distinct(.) in the dataset and denoting the output as uniques the data class (i.e., type) for each variable in the dataset and denoting that output as obj_type 6.5 Nesting data frames You need to install the purrr package and load it. purrr is party of the Tidyverse universe, so the following commands will be written in Tidyverse. This also means you can’t use purrr without loading tidyverse first. Nesting generates one row for each group from the non-nested columns. This is useful for models. Probably the best way to understand nesting is through a grouping variable. iris %&gt;% group_by(Species) %&gt;% nest() The output should show that there are 3 different groups in the Species variable. For each Species, there are 50 rows (observations) and 4 columns (variables). Essentially, these are data frames within a data frame. Each data column is a list, which is called a list-column. This is helpful when you want to estimate a model within each species. To illustrate this, go ahead and create an object that groups your data set by Species. nested_iris &lt;- iris %&gt;% group_by(Species) %&gt;% nest() %&gt;% print() Then, you want to know, “Does the width of the petal affect the length of the petal?” (I don’t know anything about irises, so hopefully this question isn’t too dumb.) To do this, you can run a regression. nested_models &lt;- nested_iris %&gt;% mutate( model = map( .x = data, .f = ~ lm(Petal.Length ~ Petal.Width, data = .x) ) ) %&gt;% print() The output should show a new column: the “model” column. What you just did is, you grouped all the Species together, called the data, and ran the lm function, which is the function for an ordinary least squares regression. Then, you printed the results. If you want to look at each variable in the nested data frame, you can crack it open the same way you look at variables in a regular data frame. nested_models$Species nested_models$data nested_models$model If you want to extract coefficients into a new column called “coefs,” you can just call the model function you created. nested_coefs &lt;- nested_models %&gt;% mutate(coefs = map(model, coefficients)) %&gt;% print() nested_tidy Output should show a new variable called coefs. nested_coefs$coefs output should list all the coefficients for each Species group. When you are done, you can unnest columns. coefs &lt;- nested_coefs %&gt;% unnest(coefs) %&gt;% print() As you can see, the coefs column is no longer grouped together. Once they are unnested, it expands: there’s a row for the intercept and the coefficient for each group. You will be unable to unnest non-data frame objects (try nested_coefs %&gt;% unnest(model)—it doesn’t work!!), but, as you recall, you can pull them out by doing nested_tidy$model. Or, if you want to write this in a tidy way… nested_coefs %&gt;% pull(model) If you want to work more with purrr, I highly recommend that you check out the purrr cheat sheet. "],
["base-r-vs-tidyverse.html", "7 Base R vs. Tidyverse 7.1 But first, what’s Tidyverse? 7.2 R basics 7.3 Loading data into R 7.4 Comparing base R vs. Tidyverse", " 7 Base R vs. Tidyverse While my predecessors are Tidyverse zealots, I am not. When it comes to learning R, I don’t feel the need to force anyone into learning it one way or the other. People may disagree with this philosophy! Ultimately, I want you to feel comfortable whenever you encounter R. And, the fact is, many people use both base R and Tidyverse so it is best to know both. In PS 812, for example, you will be using primarily base R functions. So forcing you to learn only Tidyverse at this point feels impractical and incompatible with your broader learning goals. Throughout this course, I will try to specify when I am using base R and when I am using Tidyverse. There are some functions that I find much easier (and more intuitive) in base R, and others that I prefer written in Tidyverse. But just know this: if there’s a way to write it in Tidyverse, there’s a way to write in base R, and vice versa. 7.1 But first, what’s Tidyverse? Tidyverse is a R package designed to clean and manipulate data. Compared to base R, Tidyverse can clean and manipulate data much faster with code that is more compact and practical. However, there are commands that are faster to write and easier to remember in base R, even if it doesn’t process faster than its Tidyverse equivalent. You will figure out which commands those turn out to be. In general, processing time is dependent on the amount of data you have, so if you only have a few thousand observations, it might not make much of a difference, but it will probably make a difference if you have tens or hundreds of thousands of observations. 7.2 R basics Some of these exercises were inspired by Mike DeCrescenzo’s R basics materials and Kosuke Imai’s supplementary materials for his book. Go to RStudio. Go to File &gt; Open Project in New Session. Find your ps811-exercises folder. Go to File &gt; New File &gt; R Script. A new Untitled1 R Script tab will open. Go to File &gt; Save As. Name it lecture5-exercise-basic.R. 7.2.1 Use R as a calculator Use R to add/subtract/multiply/divide. You don’t need the spaces between each command, but it is easier to read if you do. 2 + 3 3 - 1 12 * 12 50 / 2 Outputs should be 5, 2, 144, and 25, respectively. R searches the next line if the inital line is incomplete. 50 / 2 Output should be 25. Use R to conduct order of operations. 5^(10/5) Output should be 25. You may also use commands for Euler’s constant and the natural log in R. exp(1) log(1) R recognizes pi and cosines. pi cos(pi) If you ever want to figure out how to calculate something in R, just Google it or check out this short Quick-R Operators list for commonly used arithmetic and logical operators. 7.2.2 Creating objects You want to put 8 + 1 into an object called nine. nine &lt;- 8 + 1 See what happens when you type the name of the object, nine. You get an output of 9. You can also do math with the object. Type in sqrt(nine). You get an output of 3. Everything can be an object. You can store text in some other text. hello &lt;- &quot;hi&quot; hello Output should be hi. If you would like to put something else in the object, you can simply overwrite it. hello &lt;- &quot;hi, nice to meet you, what is your name&quot; hello the_answer &lt;- 8 + 1 the_answer nine &lt;- 50 + 4 nine # the numeric value does not have to be nine Output should be “hi, nice to meet you, what is your name,” 9, and 54, respectively. 7.2.3 Creating vectors Vectors can be a bunch of different values. vector_example &lt;- c(5, 6, 7, 8, 9, 10, 100) You can multiple the vector with an equation, such as 2x. results &lt;- 2 * vector_example results Output should be 10, 12, 14, 16, 18, 20, 200. You can multiply vectors. vector_example * results Output should be 50, 72, 98, 128, 162, 200, 20000. You can do a matrix multiplication using %*%. vector_example %*% results Output should be 20710. You can plug in the vectors into various functions. mean(vector_example) median(vector_example) mode(vector_example) sd(vector_example) # standard deviation sum(vector_example) Ouptut should be 20.71429, 8, “numeric” (there is no mode), 25.0034, 145, respectively. 7.3 Loading data into R When you first start with R, most tutorials will suggest that you use setwd() to call in your directory. And sure, that’s fine. But since this course emphasizes replication, what if someone opens your .Rproj in hopes of replicating your work and get an error when they try to run setwd(\"/Users/marcyshieh/marcyshieh.github.io/_ps811\")? They are not you, they do not work on your computer, so they need to go through the extra step of changing that line. The person trying to replicate your project can probably type getwd() and replace whatever you have in setwd() with the resulting URL, but you want to make their lives (and your life!) easier. Consider the here package. The here package allows anyone to replicate your work without being in your exact workspace and directory. Open a new file. Name it lecture5-exercise-data.R. Paste the following code into line 1 of your .R file. Highlight all the lines and click “Run” on RStudio OR command+return on MacOS or ctrl+enter on Windows. # install the here package install.packages(&quot;here&quot;) # load the here library library(&quot;here&quot;) # this is an equivalent to setwd() # check out where &quot;here&quot; is here() # this is an equivalent to getwd() # as you have probably guessed by now, the &quot;#&quot;&quot; denotes comments and R leaves them alone when you run chunks of code Download the movie_metadata.csv dataset. This dataset is from Kaggle and contains metadata about movies from IMDb. Move the movie_metadata.csv from the download location to your ps811-exercises directory. Go to your .R file. Load the CSV file into your R environment. movie_metadata &lt;- read.csv(here(&quot;movie_metadata.csv&quot;)) You are calling here() inside the read.csv() command because you are using the here() package. 7.4 Comparing base R vs. Tidyverse Much of the lesson here is indebted to Hugo Taraves, who wrote a nifty guide to syntax equivalents of base R vs. Tidyverse. Prerequisites You need to install the dplyr and tidyr packagess, and load them. Use the install.packages() and library() functions to do this. You need these packages to use Tidyverse functions. Always load your packages on the top of the .R file. Take a look at the variables in the dataset using names(movie_metadata). We are going to first go through everything in base R, then repeat everything in Tidyverse. Hopefully this gives you a sense of how base R and Tidyverse work. 7.4.1 Base R This is how these commands work in base R. Extract the first 100 rows. movie_metadata_100 &lt;- movie_metadata[1:100, ] Rows are equivalent to observations. Columns are equivalent to variables. Look at the existing variables in dataset. # you can identify the variables by name movie_metadata_100[, c(&quot;director_name&quot;, &quot;movie_title&quot;)] # or you can identify the variables by their column index/number movie_metadata_100[, c(2, 12)] Create a new variable in the dataset. # you want to get the sum of facebook likes for the first 3 actors listed in the movie movie_metadata_100$main_actors_fb_popularity &lt;- movie_metadata_100$actor_1_facebook_likes + movie_metadata_100$actor_2_facebook_likes + movie_metadata_100$actor_3_facebook_likes # view the dataset then scroll to the last column on the right to see the column you have just created! View(movie_metadata_100) Filter rows in dataset. # you want to extract the observations where there is a IMDB score of 5+ and 2 number of faces in the poster subset(movie_metadata_100, imdb_score &gt; 5 &amp; facenumber_in_poster==2) Arrange rows. # descending order of movie title followed by ascending order of budget movie_metadata_100[order(rev(movie_metadata_100$movie_title), movie_metadata_100$budget) , ] Summarize observations. # Create a dataframe with mean and standard deviation information # na.rm = TRUE removes all the NAs from the calculations # in this case, if you include the NAs, it will yield a result of NA # e.g., mean(movie_metadata_100$budget) # not what you want! data.frame(budget.mean = mean(movie_metadata_100$budget, na.rm = TRUE), budget.sd = sd(movie_metadata_100$budget, na.rm = TRUE), gross.mean = mean(movie_metadata_100$gross, na.rm = TRUE), gross.sd = sd(movie_metadata_100$gross, na.rm = TRUE)) Group observations. Summarize rows within groups # Using aggregate aggregate(formula = cbind(budget, gross) ~ country + genres, data = movie_metadata_100, FUN = function(x){ c(mean = mean(x), sd = sd(x)) }) 7.4.2 Tidyverse You know how to do it in base R, so now you can see how it works in Tidyverse! Tidyverse is a suite of packages that are extremely useful for data manipulation. We will have a longer discussion of using tidyverse package for data manipulation next week but hopefully this introduction shows how tidyverse tools deviate from base R tools. Extract the first 100 rows. movie_metadata_100tidy &lt;- movie_metadata %&gt;% top_n(100) As you have probably noticed, Tidyverse uses %&gt;%, which are called “pipes.” In essence, you are calling your dataset, and piping functions into it. Look at existing variables in dataset. # you can identify the variables by name select(movie_metadata_100tidy, director_name, movie_title) # or you can identify the variables by their column index/number select(movie_metadata_100tidy, 2, 12) If you want to turn this selection into an object, just put movie_metadata_100tidy_select&lt;- (or whatever would make sense for you) in front of the command. Create a new variable in the dataset. # you want to get the sum of facebook likes for the first 3 actors listed in the movie movie_metadata_100tidy &lt;- mutate(movie_metadata_100tidy, main_actors_fb_popularity = actor_1_facebook_likes + actor_2_facebook_likes + actor_3_facebook_likes) # you should have created a brand new variable! View(movie_metadata_100tidy) Notice that you don’t have to refer to the data set every time you call a variable. That’s one of the advantages of Tidyverse! Filter rows in dataset. # you want to extract the observations where there is a IMDB score of 5+ and 2 number of faces in the poster filter(movie_metadata_100tidy, imdb_score &gt; 5 &amp; facenumber_in_poster==2) You may also turn this filtered dataset into an object if you want! Arrange rows. # descending order of movie title followed by ascending order of budget arrange(movie_metadata_100tidy, desc(movie_title), budget) Summarize observations. # Create a dataframe with mean and standard deviation information summarise(movie_metadata_100tidy, budget.mean = mean(budget, na.rm = TRUE), budget.sd = sd(budget, na.rm = TRUE), gross.mean = mean(gross, na.rm = TRUE), gross.sd = sd(gross, na.rm = TRUE)) Group observations. Summarize rows within groups movie_metadata_100tidy %&gt;% group_by(country, genres) %&gt;% summarise(budget.mean = mean(budget), budget.sd = sd(budget), gross.mean = mean(gross), gross.sd = sd(gross)) %&gt;% ungroup() # ungroup() removes any grouping changes you make from analyses beyond this section "],
["data-manipulation.html", "8 Data Manipulation 8.1 Install packages 8.2 Read data 8.3 Understand data frames 8.4 Use tidyverse for data manipulation 8.5 Filter data", " 8 Data Manipulation In this lecture, you will learn how to manipulate data. This is probably the most important and unexpectedly time-consuming thing you will do as a social scientist. Much of this lesson is indebted to my favorite data manipulation page on the internet: Mike DeCrescenzo’s data manipulation tutorial from his 2018 PS811 course. It is the R tutorial I keep returning to again and again. 8.1 Install packages # packages library(&quot;here&quot;) library(&quot;haven&quot;) library(&quot;magrittr&quot;) library(&quot;tidyverse&quot;) library(&quot;tidyr&quot;) library(&quot;dplyr&quot;) 8.2 Read data Here, I am going to introduce you to the here package. To read more about here, I recommend that you check out this helpful love letter to the here package. # setup folders and directories here(&quot;_ps811&quot;, &quot;data&quot;) here(&quot;_ps811&quot;, &quot;code&quot;) # read stata data in R scotus &lt;- read_dta(here(&quot;_ps811&quot;, &quot;data&quot;, &quot;SCDB_2020_01_justiceCentered_Citation.dta&quot;)) There are various ways you can check out your data in R. # how does my data LOOK?? scotus # that was a lot head(scotus) # that&#39;s a little better # bottom six? tail(scotus) # i want to see more than six, like eight? head(scotus, n = 8) tail(scotus, n = 8) # you can use the View() command # this can be slow if it&#39;s a large dataset View(scotus) # if the file is, for some reason, NOT a dataframe, you can always force it become a dataframe: as.data.frame(scotus) # this doesn&#39;t do anything because it is already a dataframe # if you are ever struggling with a function, go ahead and do ?function_name # the help guide should load in the help pane ?as.data.frame 8.3 Understand data frames You might get tired from referencing both the dataset and the variable every time you want to refer to a variable. I know, typing is exhausting! You might be tempted to use the attach(dataset) function. Don’t use it. It’s not worth the headaches down the road. You will likely use multiple datasets with the same variable names and it is always less confusing for yourself and future reviewers/collaborators if you refer to both the dataset and the variable. # number of rows nrow(scotus) # number of columns ncol(scotus) # literally my favorite function: names() # super helpful for other data manipulation tasks names(scotus) # you cannot simply reference the variable justice # Error: object &#39;justice&#39; not found # you have to refer to the dataset THEN variable scotus$justice I recommend that you download or reference the codebook whenever possible. Sometimes variables are simply a string of numbers and letters (e.g., the ANES dataset has weird codes for their variables that can only be identified by looking them up in the codebook). Thankfully, the SCOTUS database is better than that, but you might still want to clarify a few things so it is easier for you (and your collaborators!) to work with. In any case, the variables are case sensitive so you might want to change the cases. You can access the online codebook for the SCOTUS database. Many codebooks for other datasets may be in PDF or Word format. 8.3.1 Data frame exercise Creating your own data frame from scratch may help you understand data frames a bit better. # take everything from the streaming service column streaming &lt;- c(&quot;Netflix&quot;, &quot;Hulu&quot;, &quot;Amazon Prime&quot;) # take everything from the approve column approve &lt;- c(50, 30, 15) # take everything from the disapprove column disapprove &lt;- c(50, 70, 85) # create variables from existing variables difference &lt;- approve-disapprove # create your dataframe streaming &lt;- data_frame(streaming, approve, disapprove, difference) streaming # this is a tibble streaming_df &lt;- as.data.frame(streaming_dataframe) 8.4 Use tidyverse for data manipulation You can use base R to manipulate data if you want. You should learn and know base R because many replication materials use base R. But, I gotta tell you, tidyverse is the grand suite for manipulating data. Think of it as the Adobe for data manipulation. So, for your own data manipulation endeavors, I’m going to advocate that you use the tidyverse suite of packages. With tidyverse, you can do the following: rename(): rename variables mutate(): create new variables select(): look at specific variable filter(): filter based on conditions summarize(): look at summary statistics group_by(): group by variables arrange(): sort variables by ascending/descending merge data using join functions more advanced than the base R merge() options With tidyr, you can do the following: gather(): collate column names and turn them into values of a single variable (opposite of spread()) spread(): untangles a variable with multiple repeating values and turns them into their own columns (opposite of gather()) 8.4.1 Rename data variables # rename(dataset, # new_name = old_name, # new_name2 = old_name2) scotus &lt;- rename(scotus, case.id = caseId, docket.id = docketId, case.issues.id = caseIssuesId, vote.id = voteId) 8.4.1.1 Remember piping? Remember Lesson 6 where we talked about piping? You can also do this using the piping technique. scotus &lt;- scotus %&gt;% rename(case.id = caseId, docket.id = docketId, case.issues.id = caseIssuesId, vote.id = voteId) This can make some of the code run faster. You will be asked to pipe on your homework assignment. The problem with the rename() function is that it overwrites everything. This means you will no longer have the old variable name around anymore because you have changed it to a new variable name. But what if you don’t want to overwrite anything? 8.4.2 Create new data variables Instead of overwriting variables, you may simply want to keep your old variables and create new ones. # let&#39;s look at decision directions table(scotus$decisionDirection) You will get the following result: 1 2 3 38531 40574 1390 We know from the code book that: 1. conservative 2. liberal 3. unspecifiable Say you want to create a dummy variable named “liberal” that has all liberal cases coded “1” and all non-liberal cases coded “0”. And, you want to create a dummy variable named “conservative that has all conservative cases coded”1\" and all non-conservative cases coded “0”. In pseudocode-logical speak (I made this up but stay with me), you’re thinking along the lines of the following code: # new_variable &lt;- ifelse(condition, if_true, if_false) # liberal &lt;- ifelse(decisionDirection == 2, 1, 0) That’s not exactly it but the logic is certainly there. Let me turn it into real code for you: scotus &lt;- mutate(scotus, liberal = ifelse(decisionDirection == 2, 1, 0), conservative = ifelse(decisionDirection == 1, 1, 0)) Say you want to do create a variable that identifies the decision dates by decade. Here’s your chance to work with date values, which many of you will have to deal with somewhere along the way. # take a look at the variable summary(scotus$year) # turn the dateDecision variable into a date variable with the date structure you see in the summary() results # extract the year and put it in a variable called year scotus$year &lt;- as.numeric(format(as.Date(scotus$dateDecision, &quot;%Y-%m-%d&quot;), &#39;%Y&#39;)) summary(scotus$year) # using the year variable, create the decade variable scotus &lt;- mutate(scotus, decade = ifelse( year %in% 1940:1949, 1940, NA), decade = ifelse( year %in% 1950:1959, 1950, decade), decade = ifelse( year %in% 1960:1969, 1960, decade), decade = ifelse( year %in% 1970:1979, 1970, decade), decade = ifelse( year %in% 1980:1989, 1980, decade), decade = ifelse( year %in% 1990:1999, 1990, decade), decade = ifelse( year %in% 2000:2009, 2000, decade), decade = ifelse( year %in% 2010:2019, 2010, decade), decade = ifelse( year %in% 2020:2029, 2020, decade)) # check out the number of votes per decade table(scotus$decade) You may also want to create new variables. Here is an example of creating a new variable that shows the number of years since a particular vote was cast by a justice. scotus &lt;- mutate(scotus, time_trends = 2020 - year) 8.4.3 Logical operators You can access a complete list of logical operators on the Data Mentor page, but I’ve highlighted a few that you will likely encounter. &lt;: less than &lt;=: less than or equal to &gt;: greater than &gt;=: greater than or equal to ==: exactly equal to !=: not equal to !x: Not x x | y: x OR y x &amp; y: x AND y x %in% c(y, z): x is equal to y or z isTRUE(x): test if x is TRUE isFALSE(x): test if x is false is.na(x): test if x is NA !is.na(x): test if x is NOT NA 8.4.4 Same function, multiple conditions What if we want to check multiple conditions within the same function? You use the case_when() function. scotus &lt;- mutate(scotus, decisionDirection = case_when( decisionDirection == 1 ~ conservative, decisionDirection == 2 ~ liberal, decisionDirection == 3 ~ unspecified)) 8.4.5 Select columns Say your question is whether the decade a case was decided influences whether it is liberal or not, so you might only care about two variables. You use the select() function. The structure of the select() function is select(dataset, var1, var2). var1, var2, etc. are the variables you want to select from the dataset. Think of it as grabbing these variables and deleting all the rest. select(scotus, decade, liberal) You can also turn it into an object so you can use it later. scotus_select &lt;- select(scotus, decade, liberal) Say you only want to select caseId and all background variables (consecutively ordered). select(scotus, caseId, caseName:lcDispositionDirection) Say you only want to select caseid and any variable that contains “case” in the name. select(scotus, caseId, contains(&quot;case&quot;)) Say you want to drop the docketId and keep all other variables. select(scotus, -docketId) # more specifically, you can do: select(scotus, -docketId, matches(&quot;.&quot;)) # matches(&quot;.&quot;) keeps all remaining variables # though not having also keeps all remaining variables 8.5 Filter data You know how you can filter data in Excel? You can do this in R as well. Why would you want to know how to do it in R when you already know how to do it in Excel? Well, if you have a dataset that has hundreds of thousands of observations, it will take forever to load and filter in Excel. It will be way faster if you do it in R. Say you only want to filter to decisions from before 1990. filter(scotus, year &lt; 1990) Say you only want to filter to decisions from 1990. filter(scotus, year == 1990) Say you want to filter to decisions from Ruth Bader Ginsburg in 2000 filter(scotus, year == 2000, justiceName == &quot;RBGinsburg&quot;) 8.5.1 Summarize data Think of this as a more advanced summary() command where you can specify what you want to summarize. # look at the mean of liberal cases (1 being liberal, 0 being non-liberal) scotus %&gt;% summarise(mean = mean(liberal, na.rm = TRUE), n = n()) # group by decade, then look at the mean of liberal cases scotus %&gt;% group_by(decade) %&gt;% summarise(mean = mean(liberal, na.rm = TRUE), n = n()) # group by decade and look at the quantiles of liberal cases scotus %&gt;% group_by(decade) %&gt;% summarise(qs = quantile(liberal, na.rm = TRUE, c(0.25, 0.75)), prob = c(0.25, 0.75)) 8.5.2 Sort data Remember this object we created earlier in the select() section? scotus_select &lt;- select(scotus, decade, liberal) Sort decade by ascending order. arrange(scotus_select, decade, liberal) Sort decade by descending order. arrange(scotus_select, desc(decade), liberal) 8.5.2.1 Identify what to sort Here’s a mini exercise to help you understand sorting. # there&#39;s an order to this # arrange(dataset, var1, var2) # this means you sort by var1, then by var2 # for example sort_ex_df &lt;- data_frame(x = c(1, 2, 3, 3, 5, 6), y = c(&quot;A&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;B&quot;, &quot;F&quot;)) arrange(sort_ex_df, x, y) arrange(sort_ex_df, y, x) 8.5.3 Merge datasets You might have two datasets that you would like to merge. For some reason, you might obtain grades for a few students from their English and math classes and be asked to create a report card for each student. english &lt;- data_frame(studentID = c(990055, 889765, 189245, 346789, 534098, 132938, 789012), grade = c(90, 85, 60, 75, 67, 93, 82)) math &lt;- data_frame(studentID = c(990055, 889765, 189245, 346789, 534098, 345890), grade = c(80, 90, 50, 85, 95, 66)) You can do this really quickly in base R without much thought. merge(english, math, by=&quot;studentID&quot;) # english grade is &quot;grade.x&quot; and math grade is &quot;grade.y&quot; The basic merge() function only merge variables that exist in BOTH datasets. If you want to keep all variables in x or y, you can do it in merge() (and it’s only a Google search away!) but it’s WAY easier to remember the functions in the dplyr package. # imitate merge() inner_join(english, math, by = &quot;studentID&quot;) # join all, keep all variables, even if NA full_join(english, math, by=&quot;studentID&quot;) # keep all students in x left_join(english, math, by = &quot;studentID&quot;) # keep all students in y right_join(english, math, by = &quot;studentID&quot;) # figure out what doesn&#39;t match # shows studentID that is in english but not in math anti_join(english, math, by = &quot;studentID&quot;) # shows studentID that is in math but not in english anti_join(math, english, by = &quot;studentID&quot;) 8.5.4 View tables If you want to just take a look at a variable, the table() function is extremely helpful. # sometimes you just want to see a table of what&#39;s going on with a variable table(scotus$decade) table(scotus$liberal) You can also turn the tables into a proportional table and control the number of decimal points that appear. # turn it into a proportional table prop.table(table(scotus$decisionDirection)) # round to 2 decimal points round(prop.table(table(scotus$decisionDirection)), 2) You can also create a crosstab with two variables. # basic crosstab table(scotus$decade, scotus$decisionDirection) # and a prop crosstab prop.table(table(scotus$decade, scotus$decisionDirection)) # and with rounding! round(prop.table(table(scotus$decade, scotus$decisionDirection)), 2) Turn the basic table into an object. scotus_cross_example &lt;- table(scotus$decade, scotus$decisionDirection) I am going to demonstrate the margin command. Say I want to know (liberal decision in 1940s)/(all liberal decisions in every decade). I will want to look at margin = 1, which will add up the number of liberal decisions in the dataset (rows). scotus_cross_prop_example_row &lt;- prop.table(scotus_cross_example, margin = 1) Say I want to know (liberal decision in 1940s)/(all decisions in the 1940s). I will want to look at margin = 2, which will add up the number decisions per type (columns). scotus_cross_prop_example_col &lt;- prop.table(tab, margin = 2) Say you want to count the number of cases per decade per decision type and you want it in a dataframe. count(scotus, decade, decisionDirection) You can turn this data frame into an object! scotus_count &lt;- count(scotus, decade, decisionDirection) 8.5.5 Group variables You may want to create descriptive counts per group. # you want to see the proportion of type_of_decision per decade # so you sum up ALL the decisions per decade # divide the number of decision types per decade by the number of ALL decisions in decade # then round them to 3 decimal places mutate(group_by(scotus_count, decade), n_in_decade = sum(n, na.rm = TRUE), p = n / n_in_decade, p = round(p, 3)) 8.5.6 Reshape data I can demonstrate this better if we create a new dataset. scotus_df_example &lt;- select(scotus, term, issueArea, decisionDirection) Currently, our decade variable is what you would call a wide dataset because it is horizontally wide. head(scotus_df_example) scotus_df_example &lt;- as.data.frame(scotus_df_example) Let’s use what we’ve learned to wrangle this dataset a bit. We want to select the term, liberal, and conservative variables. We want to filter the terms from 2017 to 2018. Term is different from year because term covers an entire SCOTUS term from October to June (i.e., so when the case was heard), while the year of decision (the year variable that we created earlier) is whenever SCOTUS filed the decision. # select our variables scotus_df_example &lt;- select(scotus, term, liberal, conservative) # filter to terms 2017, 2018, 2019 scotus_df_example &lt;- filter(scotus_df_example, term %in% c(2017, 2018, 2019)) # group by term # create a variable for mean(liberal) and mean(conservative) scotus_df_example &lt;- summarize(group_by(scotus_df_example, term), liberal = mean(liberal, na.rm = TRUE), conservative = mean(conservative, na.rm = TRUE)) scotus_df_example Say we want to make it into a long dataset. We would use the gather() function. The key variable allows us to create the variable that we want the values in our individual columns to collate as. This is what we mean… # gather() scotus_df_example_gather &lt;- gather(scotus_df_example, key = ideology, value = average, liberal, conservative) The result should look like this. As you can see, the liberal and conservative variables are now values in the ideology variable with their mean scores in the average column. &gt; scotus_df_example_gather # A tibble: 6 x 3 term ideology average &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; 1 2017 liberal 0.44 2 2018 liberal 0.493 3 2019 liberal 0.5 4 2017 conservative 0.467 5 2018 conservative 0.466 6 2019 conservative 0.433 We can then turn it back into a wide dataset. We would use the spread() function. This spreads out the data once again into its original setup. spread(scotus_df_example_gather, key = ideology, value = average) "],
["graphics.html", "9 Graphics 9.1 I am going to pay lip service to the comparativists… 9.2 base R graphs 9.3 World of ggplot2", " 9 Graphics In this lecture, you will learn how to create graphics in R. You can create graphics using both base R functions or the ggplot2 R package. Personally, I like to use base R functions to preview my graphs, but I use ggplot2 for graphs I want to show to the masses. Here are some packages that we will use for this lesson. library(&quot;here&quot;) library(&quot;readxl&quot;) # read excel data in R library(&quot;countrycode&quot;) And let’s refer to some files and folders. # setup folders and directories here(&quot;data&quot;) here(&quot;code&quot;) 9.1 I am going to pay lip service to the comparativists… By now, students of comparative politics students are probably familiar with the Correlates of War (CoW) and Polity IV datasets. These are extremely popular datasets that scholars tends to use separately or in tandem. If you ever do want to use them in tandem, you are in luck! Because they are so popular, there is already an R package that allows you to merge the two datasets painlessly. And Americanists: it’s good to know about the flagship datasets in other subfields. It makes you a well-rounded scholar. First, download the CoW national mateiral capabilities dataset and Polity IV coup d’etat dataset. Then, load them into R. Please download the codebooks as well. You should always download the codebooks or bookmark an online version if they’re available. # read excel data in R: coup data # http://www.systemicpeace.org/inscrdata.html coups_polity &lt;- read_excel(here(&quot;data&quot;, &quot;CSPCoupsListv2018.xls&quot;)) # read csv file in R: national trade data # https://correlatesofwar.org/data-sets/bilateral-trade power_cow &lt;- read.csv(here(&quot;data&quot;, &quot;NMC_v4_0.csv&quot;)) You have installed the countrycode R package earlier in the lesson. Now it is time to use it. Here, you basically want to make sure the country IDs fo reach dataset “link” together. Many datasets label their countries differently–some with numbers, some with abbreviations, some with different abbreviations. Think of this linking exercise in this logical sequence: A = B, B = B, B = C. In the example below, we can see that the Polity scode variable is equal to the p4c variable in the countrycode package. We want to link Polity data to CoW numeric data, which is in the CoW dataset we downloaded. Once we merge the Polity ID to the CoW ID, we can merge the coup and trade datasets and use that common ID to link to a country name. coups_polity$p4c &lt;- countrycode(coups_polity$scode, origin = &quot;p4c&quot;, destination = &quot;cown&quot;) power_cow$cown &lt;- countrycode(power_cow$ccode, origin = &quot;cown&quot;, destination = &quot;cown&quot;) coups_power &lt;- merge(coups_polity, power_cow, id=&quot;cown&quot;) coups_power$country &lt;- countrycode(coups_power$cown, origin = &quot;cown&quot;, destination = &quot;country.name&quot;) As a sanity check—and because these datasets aren’t that big anyway—I’d like to View() my dataset in R and look at their variable names(). # view the dataset View(coups_power) # look at the variable names names(coups_power) 9.2 base R graphs Sometimes you want to look at the distribution of a particular variable or the correlation of two variables, so you want a quick and dirty function that allows you to do those things, without having to think too much about other stuff. That’s where base R graphs can be useful. 9.2.1 Scatter plots To learn more about scatterplots, review the STHDA tutorial. So say for some reason, we want to answer the question: Does a higher urban population lead to a higher total population? (This is a random question with no theoretical backing. I don’t know anything about these datasets.) We want to define our X (urban population) and Y (total population). x &lt;- coups_power$upop y &lt;- coups_power$tpop You want to use the plot() command to create a scatterplot. Let’s break it down. You have already defined x and y in the previous two lines of code. main defines the title of the graph. xlab and ylab are the labels for the x and y axes. pch are plot symbols. You can obtain the full list of plot symbols at STHDA. frame = TRUE creates a box around the graph. If frame = FALSE, the box disappears. abline(lm(y ~ x, data = coups_power), col = \"blue\") adds a blue regression line. plot(x, y, main = &quot;Effect of urban population on total population&quot;, xlab = &quot;urban population&quot;, ylab = &quot;total population&quot;, pch = 19, frame = TRUE) abline(lm(y ~ x, data = coups_power), col = &quot;blue&quot;) base-scatter 9.2.2 Box plots You want to create a boxplot of the variable the counts the number of successful coups. # Box plot of one variable: success of coups boxplot(coups_power$success) base-boxplot 9.2.3 Bar plots Now we can create a simple barplot of the number of successful coups. barplot(coups_power$success) base-barplot Well, that doesn’t look too great. Why don’t you plop the counts into a table instead? barplot(table(coups_power$success)) base-barplot-table You can even consider looking at the number of successful coups per year. barplot(table(coups_power$success, coups_power$year)) base-barplot-xtable 9.2.4 Line plots Instead of pre-defining the X and Y variables like we did for the scatterplots, we can directly plop the X and Y variables into the plot() function. Let’s review the different components. type indicates the type of line. So type = l indicates a line, and type = p indicates points. Quick-R has a list of type values. plot(coups_power$year, coups_power$success, type = &quot;l&quot;, lty = 1) base-lineplot 9.2.5 Histogram and density plots You can also create a histogram of the number of successful coups. You can also specify the breaks by indicating the algorithm you prefer. hist(coups_power$success, breaks = &quot;Sturges&quot;) base-hist 9.2.6 Pie charts I’m not going to teach how to create a pie chart. There is extensive documentation on the Internet about why pie charts are evil. Look them up. In any case, social scientists are not fans of pie charts. Do not be surprised if you create a pie chart and someone tells you to change it into a bar plot. If you somehow learn how to create a pie chart in R, I just want it to be on the record that you did not learn it from me. 9.3 World of ggplot2 The gg in ggplot2 apparently stands for “grammar of graphics.” This sounds way too hifaluten for me to actually explain, but essentially, it is a package that abides by a certain structure. What structure? you may ask. Well, there are components of a ggplot2 graph that you will see all the time, not unlike prepositions or punctuations in the English language. If you are curious about the nitty gritty theory of graphic-building, Hadley Wickham’s “A Layered Grammar of Graphics” (Wickham created ggplot2) might make a good nightcap. In general, I highly recommend looking at the official ggplot2 website because they do a pretty good job explaining everything. If you care about making things look pretty, I would point you to the R Gallery for some ggplot2 inspo. I am also indebted to Selva Prabhakaran and Mike DeCrescenzo for their excellent tutorials. 9.3.1 Load packages library(&quot;magrittr&quot;) library(&quot;tidyverse&quot;) library(&quot;ggplot2&quot;) library(&quot;scales&quot;) 9.3.2 Load dataset The truth is, you’re probably not going to write a ggplot2 graph from scratch because you’re not a machine. You’re probably going to copy and paste the code from the Internet or an old .R file. The goal of this lesson is to help you learn how to recycle the ggplot2 structure so you can customize it to your intended use. In short, I just want you to understand what to do with a ggplot2 structure and mold it into something you can use. 9.3.3 Components Here are some ggplot2 components that you need to know. We’ll revisit them again and discuss how to use them, but here’s a general overview. data: the data source that you are using to grab variables from to put on the graph aesthetics: how your graph should look like (e.g., colors) geoms: how you want to plot your graph (e.g, line, points, bargraph) scale: how you want to present your graph (e.g., by color, which axes) coordinates: what kind of plane you are plotting (for the purpose of not being confusing, we are going to use the x and y coordinates) facets: split up your graph into different categories theme: change font size, font color, etc. 9.3.4 Create plot Create a plot with ggplot2. You put everything in the command ggplot(). data allows you to refer to your dataset and in this case, it is power_cow. Within the aes command, you put in your X and Y variables. In this case, the x-axis is year and the y-axis is milex (military expenditures). # milex: military expenditures ggplot(data = power_cow, aes(x = year, y = milex)) ggplot-create You’ve created the plot. But it’s not populated… 9.3.5 Populate plot You want to “color in the lines” and decide how to populate the graph. 9.3.5.1 Dot plot geom_point: create a dot plot ggplot(data = power_cow, aes(x = milper, y = milex)) + geom_point() ggplot-point 9.3.5.2 Fit a line You can also fit a regression line on your plot. Notice that, instead of lm, you use geom_smooth and define the method to use to create your line. All options are on the ggplot2 smoothed conditional means page, under the methods definition. ggplot(data = power_cow, aes(x = milper, y = milex)) + geom_point() + geom_smooth(method=&quot;lm&quot;) ggplot-point-lm You can also turn your ggplot into an object. g &lt;- ggplot(power_cow, aes(x = milper, y = milex)) + geom_point() + geom_smooth(method=&quot;lm&quot;) Then you can access the ggplot by just referring to the object g. g 9.3.6 Aesthetics You can control how your plot looks in ggplot. Of course, you can do this with base R as well, but ggplot is much more versatile with what you can do with your graph. 9.3.6.1 Labels g + labs(title=&quot;Military Personnel and Expenditures&quot;, subtitle=&quot;From power COW dataset&quot;, y=&quot;Expenditures&quot;, x=&quot;Personnel&quot;, caption=&quot;Military&quot;) ggplot-scatter-labels 9.3.6.2 Colors Be careful. Color-blind people hate colors. People with colorblindness have a difficult time reading graphs with too many colors/too many similar colors. Please consider reading about best practices when it comes to using colors in a way that is accessible to all people. There are some palettes that are supposedly colorblind-friendly. I cannot attest to their effectiveness. In general, you should try to use black and white as much as possible just because your paper will likely bepublished in black and white. Colors can be fun for presentations, but not always useful otherwise. 9.3.6.2.1 Change color and size of points ggplot(power_cow, aes(x = milper, y = milex)) + # Set color and size for points # here are some colors (starts from page 2): http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf geom_point(col=&quot;steelblue&quot;, size=3) + geom_smooth(method=&quot;lm&quot;, col=&quot;firebrick&quot;) + # change the color of line labs(title=&quot;Military Personnel and Expenditures&quot;, subtitle=&quot;From power COW dataset&quot;, y=&quot;Expenditures&quot;, x=&quot;Personnel&quot;, caption=&quot;Military&quot;) ggplot-point-size-color You may also change colors to reflect the category in another variable. ggplot(power_cow, aes(x = milper, y = milex)) + geom_point(aes(col=year), size=3) + # Set color to vary based on state categories. geom_smooth(method=&quot;lm&quot;, col=&quot;firebrick&quot;, size=2) + labs(title=&quot;Military Personnel and Expenditures&quot;, subtitle=&quot;From power COW dataset&quot;, y=&quot;Expenditures&quot;, x=&quot;Personnel&quot;, caption=&quot;Military&quot;) ggplot-point-year-gradient Notice how the year is a gradient. You may want to change it into factors… ggplot(power_cow, aes(x = milper, y = milex)) + geom_point(aes(col=factor(year)), size=3) + # Set color to vary based on state categories. geom_smooth(method=&quot;lm&quot;, col=&quot;firebrick&quot;, size=2) + labs(title=&quot;Military Personnel and Expenditures&quot;, subtitle=&quot;From power COW dataset&quot;, y=&quot;Expenditures&quot;, x=&quot;Personnel&quot;, caption=&quot;Military&quot;) ggplot-point-toomanyyears You may notice that there are just too many years. Instead, you may want to filter to the last five years in the dataset. You can do this by leveraging your data manipulation skills. power_cow2 &lt;- dplyr::filter(power_cow, year == 1995:2000) power_cow2 Now you can plot a slightly less annoying graph. by doing factor(year), I am grouping the points together by year. # I turned it into an object so we can play around with it later... gg2 &lt;- ggplot(power_cow2, aes(x = milper, y = milex)) + geom_point(aes(col=factor(year)), size=3) + geom_smooth(method=&quot;lm&quot;, col=&quot;firebrick&quot;, size=2) + labs(title=&quot;Military Personnel and Expenditures&quot;, subtitle=&quot;From power COW dataset&quot;, y=&quot;Expenditures&quot;, x=&quot;Personnel&quot;, caption=&quot;Military&quot;) # check out the graph-object gg2 ggplot-factor-years You may also change the color schemes if you’re not happy with it. You can use the RColorBrewer package. All the palettes in the library are available here. There are also many other palette packages you can find on the web. library(RColorBrewer) gg2 + scale_colour_brewer(palette = &quot;Set1&quot;) ggplot-year-colorbrewer 9.3.6.3 Bar graphs geom_bar: you want to create a bar graph this time so you are going to use geom_bar stat = 'identity': sums the number of military expenditures per year scale_y_continuous(labels = scales::comma): tells the graph to create a y-axis that has labels separated by commas. For more options. review ggplot2’s guide on position scales for continuous data. ggplot(power_cow2, aes(x=factor(year), y=milex, label=milex)) + geom_bar(stat=&#39;identity&#39;, width=.5) + labs(title=&quot;Military Expenditures by Year&quot;, subtitle=&quot;Around the world&quot;, y=&quot;Expenditures ($)&quot;, x=&quot;Year&quot;) + scale_y_continuous(labels = scales::comma) ggplot-bargraph 9.3.6.4 Faceting What if I want to separate my graphs by states (i.e., countries)? You can use facet_wrap. You can use facets to put your graphs in a grid. Review the ggplot2 guide on facets for more information. ggplot(power_cow2, aes(x=factor(year), y=milex, label=milex)) + geom_bar(stat=&#39;identity&#39;, width=.5) + labs(title=&quot;Military Expenditures by Year&quot;, subtitle=&quot;Around the world&quot;, y=&quot;Expenditures ($)&quot;, x=&quot;Year&quot;) + scale_y_continuous(labels = scales::comma) + facet_wrap(~ stateabb) ggplot-facetwrap Sigh, but the x-axis looks ugly and I can’t read it. Why don’t we rotate it? angle = 90: rotate it by 90 degrees hjust: horizontal justification (right-justified) if 1; left-justified if hjust = 0 ggplot(power_cow2, aes(x=factor(year), y=milex, label=milex)) + geom_bar(stat=&#39;identity&#39;, width=.5) + labs(title=&quot;Military Expenditures by Year&quot;, subtitle=&quot;Around the world&quot;, y=&quot;Expenditures ($)&quot;, x=&quot;Year&quot;) + scale_y_continuous(labels = scales::comma) + facet_wrap(~ stateabb) + theme(axis.text.x=element_text(angle=90, hjust=1)) ggplot-facetwrap-rotate This is a lot to digest… We can do some more tweaking… scale_y_continuous: you can change the scale to 0, 10, 20, 30 M theme(axis.text.x=element_text(angle=90, hjust=1, size = 4)): size = 4 is the size of the font in the x-axis ggplot(power_cow2, aes(x=stateabb, y=milex, label=milex)) + geom_bar(stat=&#39;identity&#39;, width=.5) + labs(title=&quot;Military Expenditures by Year&quot;, subtitle=&quot;Around the world&quot;, y=&quot;Expenditures ($)&quot;, x=&quot;Year&quot;) + scale_y_continuous(labels = unit_format(unit = &quot;M&quot;, scale = 1e-6)) + facet_wrap(~ year) + theme(axis.text.x=element_text(angle=90, hjust=1, size = 4)) ggplot-facetwrap-yaxis You can play around with the y-axis even more… We can: * scale_y_log10: rescale the y-axis to “zoom in” more * this is when we take a log10 of the y values * many people handle expenditures in the millions * logarithms are an easier (and clearer) way to express large numbers we are using facet_wrap again but you may use facet_grid(var1 ~ var2) if you have data and want to split the graph into more categories (e.g., year ~ gender) ggplot(power_cow2, aes(x=stateabb, y=milex, label=milex)) + geom_bar(stat=&#39;identity&#39;, width=.5) + labs(title=&quot;Military Expenditures by Year&quot;, subtitle=&quot;Around the world&quot;, y=&quot;Expenditures ($)&quot;, x=&quot;Year&quot;) + scale_y_log10(labels = scales::label_number_si()) + facet_wrap(~ year) + theme(axis.text.x=element_text(angle=90, hjust=1, size = 4)) ggplot-facetwrap-year The best way to learn ggplot2 is through experience. Trust me on this. 9.3.6.5 Extensions You can do a bunch of other things with ggplot2, such as creating animated graphs, adding themes to graphs, making your graphs interactive, and so on! I recommend looking at the ggplot2 extensions for a full suite of options. "],
["analysis.html", "10 Analysis 10.1 Load packages 10.2 Load data 10.3 Rename variables 10.4 Descriptive analysis 10.5 Data summary 10.6 Regression analysis", " 10 Analysis In this lecture, you will learn how to do basic linear regressions in R. 10.1 Load packages Here are some packages you will need for this lesson. # load package library(&quot;here&quot;) library(&quot;haven&quot;) # here are some useful data analysis packages library(&quot;Rmisc&quot;) library(&quot;magrittr&quot;) library(&quot;tidyverse&quot;) library(&quot;ggplot2&quot;) library(&quot;broom&quot;) library(&quot;MASS&quot;) library(&quot;estimatr&quot;) library(&quot;modelsummary&quot;) 10.2 Load data In this lesson, we will be using the American National Election Survey (ANES) 2016 dataset. The ANES is a nationally representative dataset of eligible voters in the U.S. fielded by the University of Michigan before and after every presidential election to gauge what Americans thought about major issues. Using the here package, you can set up folders and directories. # setup folders and directories here(&quot;code&quot;) here(&quot;data&quot;) # read stata data in R anes2016 &lt;- read_dta(here(&quot;data&quot;, &quot;anes_timeseries_2016.dta&quot;)) 10.3 Rename variables Many of the variables in the ANES are just gibberish code. For example: # DV: V162034: POST: Did R vote for President # IV: V162256: PRE: R&#39;s interest in politics # control: V161019: PRE: party of registration You may want to change your variables of interests to names that are easier to reference. # these names are hard to remember, so you can change them anes2016$post.vote &lt;- anes2016$V162034 anes2016$pre.interest &lt;- anes2016$V162256 anes2016$pre.party &lt;- anes2016$V161019 anes2016$pre.registered &lt;- anes2016$V161011a anes2016$pre.gender &lt;- anes2016$V161342 10.4 Descriptive analysis For non-regression analysis, we may just want to look at the confidence intervals. To do this, we can use the group.CI() command. Since we are not grouping post.vote, we just put “1” instead of an actual group. Note that &gt; precedes R commands. If you want to run the line in R, please remove &gt;. # since we are not grouping post.vote, we just put &quot;1&quot; instead of an actual group &gt; group.CI(post.vote ~ 1, data = anes2016) post.vote.upper post.vote.mean post.vote.lower 1 1.01874 1.014286 1.009832 To group the post.vote variable by pre.gender, we can do the following… # now grouping vote for president... &gt; groupCI_anes &lt;- group.CI(post.vote ~ pre.gender, data = anes2016) &gt; groupCI_anes pre.gender post.vote.upper post.vote.mean post.vote.lower 1 -9 1.000000 1.000000 1.000000 2 1 1.023858 1.016746 1.009635 3 2 1.018220 1.012483 1.006745 4 3 1.000000 1.000000 1.000000 10.4.1 Descriptive graph Since this is a dataframe so you can turn it into a graph pretty easily. # this is a dataframe so you can turn it into a graph pretty easily ggplot(groupCI_anes, aes(x = as.factor(pre.gender), y = post.vote.mean)) + geom_pointrange(aes(ymin = post.vote.lower, ymax = post.vote.upper)) + theme(panel.grid.minor = element_blank()) ggplot-groupCI 10.5 Data summary The modelsummary package includes a powerful suite of data summary tools. It has many tools that can create the tables you often see in published articles. You may want to look at each varaible by category. Let’s use the iris dataset because there are fewer varibles…the ANES has too many variables and may not make the best example… datasummary_skim(iris) datasummary-skim-iris You can also look at the correlation between the variables. datasummary_correlation(iris) datasummary-correlation-iris 10.6 Regression analysis For all your data analysis needs in R, I ghihly recommend that you check out the UCLA data analysis page. If you ever want to know whether you can use a particular regression or how to use a particular regression, go to the UCLA stats page! It is super helpful. If you don’t know how to find what you are looking for, just type “[name of regression or type of dependent variable] UCLA R data analysis” into Google. If the options provided to you on the UCLA stats page are confusing, you should use it as a stepping stone to search for something that is easier to understand or suit your needs better. 10.6.1 Linear regression Run a simple ordinary least squared regression. The left-hand side is always the dependent variable (outcome), and the right-hand side should contain the independent variable and control variables. You typically use an OLS when their dependent variable is continuous &amp; unbounded. There are some arguments that you can use OLS for binary dependent variable in experiment, as Gerber and Green (2012) argue that the average treatment effect (ATE) is unbiased. If you ever doubt your use of OLS, you should check out OLS assumptions and consider your dependnet variables. For the sake of creating examples, I might be violating some assumptions and not thinking about the variables carefully. You should think about your tests carefully in your own work and if you do want to use something that’s not the norm, you should make sure that you justify your case. One great way to do this is cite other people’s work that you’re borrowing from, or conduct some sort of validation mechanism. ols &lt;- anes2016 %&gt;% lm(post.vote ~ pre.interest + pre.party, data = .) Look at the regression table. &gt; summary(ols) Call: lm(formula = post.vote ~ pre.interest + pre.party, data = .) Residuals: Min 1Q Median 3Q Max -0.02985 -0.01699 -0.01430 -0.01181 0.99338 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 1.002978 0.005224 192.011 &lt;2e-16 *** pre.interest 0.005182 0.002323 2.231 0.0258 * pre.party 0.001536 0.001235 1.244 0.2136 --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.1186 on 2727 degrees of freedom Multiple R-squared: 0.002354,\tAdjusted R-squared: 0.001622 F-statistic: 3.217 on 2 and 2727 DF, p-value: 0.04021 10.6.2 Diagnostic plots Look at the diagnostic plots for residuals, fitted values, Cook’s distance, and leverage. It is important to look at diagnostic plots so you can figure out if there are data points that might influence your results. opar &lt;- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0)) plot(ols, las = 1) par(opar) opar You can use a simple base R command to examine the observations. You can see where these respondents are from, etc. and see why their observations are out of the norm. For example, I want to see if they are all from the same state (V161010d is the state variable). &gt; anes2016[c(1884, 1918, 2464, 2458), &quot;V161010d&quot;] # A tibble: 4 x 1 V161010d &lt;dbl+lbl&gt; 1 42 [42. Pennsylvania] 2 47 [47. Tennessee] 3 39 [39. Ohio] 4 34 [34. New Jersey] 10.6.3 Linear regression with standard errors Robust standard errors are useful in social sciences where you don’t know the structure of the variations. So to get unnbiased standard errors for OLS, you want to insert your regression into lm_robust. Learn more about the command here. Note that the UCLA page suggests rlm() but I think lm_robust is easier to use. &gt; lm_robust(post.vote ~ pre.interest + pre.party, data = anes2016) Estimate Std. Error t value Pr(&gt;|t|) CI Lower (Intercept) 1.002977920 0.004447216 225.529416 0.00000000 0.9942576670 pre.interest 0.005182496 0.002366346 2.190084 0.02860257 0.0005424841 pre.party 0.001535810 0.001336292 1.149308 0.25052992 -0.0010844361 CI Upper DF (Intercept) 1.011698172 2727 pre.interest 0.009822509 2727 pre.party 0.004156056 2727 10.6.4 Logit regression You may want to use a generalized linear model if your dependent variable contains binary outcomes. You may want to first check the “family” of distributions of your outcome using a histogram. I like to use base R for this so I can quickly eyeball the distribution of the data. hist(anes2016$post.vote) hist-before The data is a bit of a mess. You may want to only keep the respondents who either voted or did not vote. anes2016 &lt;- anes2016 %&gt;% filter(post.vote == 1 | post.vote == 2) You can look at the histogram again. hist(anes2016$post.vote) Annoyingly, 1 = voted for president and 2 = did not vote for president. Grrr… Many binary variables are not perfectly 0 and 1 unless you convert it. I personally like to create a new variable if I am modifying an existing variable (so I always have the original variable around in case I need to go back and check something). anes2016 &lt;- anes2016 %&gt;% mutate( post.vote.binary = ifelse(post.vote == 1, 1, 0)) hist(anes2016$post.vote.binary) hist-after Now it is 1 = voted for president and 2 = did not vote for president. Yay! For the gender variable, you may convert it to only look at the women vote. For a dataset like the ANES, the survey does not take into careful consideration of gender issues, but other surveys—and hopefully your own—take it into account. But one aspect of representative voting that people are interested in, and that a representative dataset like the ANES is able to evaluate, is how women vote. One way to do this is to convert the gender variable to “woman” or “not woman.” Here, if pre.gender == 2, then the respondent is a woman. From this variable, you want to create a variable for respondents who identify as women. anes2016 &lt;- anes2016 %&gt;% mutate( pre.female = ifelse(pre.gender == 2, 1, 0)) Now, you want to know if identifying as female makes a respondent more likely to vote for president. Since pre.female is a binary variable, you will want to use a GLM. logit &lt;- glm(post.vote.binary ~ pre.female, family = binomial, data = anes2016) Then, you want to look at the regression table. &gt; summary(logit) Call: glm(formula = post.vote.binary ~ pre.female, family = binomial, data = anes2016) Deviance Residuals: Min 1Q Median 3Q Max -2.9609 0.1585 0.1585 0.1813 0.1813 Coefficients: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) 4.0999 0.2200 18.634 &lt;2e-16 *** pre.female 0.2710 0.3235 0.838 0.402 --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 (Dispersion parameter for binomial family taken to be 1) Null deviance: 408.82 on 2729 degrees of freedom Residual deviance: 408.12 on 2728 degrees of freedom AIC: 412.12 Number of Fisher Scoring iterations: 7 You may ask yourself, “How do I transfer my regression table into R Markdown??” Let me introduce you to the stargazer package. Here is the best Stargazer tutorial. Install and load stargazer. install.packages(&quot;stargazer&quot;) library(stargazer) First off, stargazer makes your tables look NICE. stargazer(logit, type = &quot;text&quot;, # you can customize the labels title = &quot;Effect of gender on voting for president&quot;, covariate.labels = c(&quot;Female&quot;), dep.var.labels = &quot;Voted for president&quot;) This is a nice stargazer text table. It kinda looks like you ripped it out of a published journal! Effect of gender on voting for president ============================================= Dependent variable: --------------------------- Voted for president --------------------------------------------- Female 0.271 (0.324) Constant 4.100*** (0.220) --------------------------------------------- Observations 2,730 Log Likelihood -204.059 Akaike Inf. Crit. 412.119 ============================================= Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 But how do you insert this into your R Markdown document? Well, you will want to print it as a LaTeX table because R Markdown has built-in tex options. I think tex is nicer for formatting and typesetting, but R markdown is more convenient (I think!). Remove the beginning hashtags # in the code… # ```{r, results=&#39;asis&#39;} stargazer(logit, type=&#39;latex&#39;, title = &quot;Effect of gender on voting for president&quot;, covariate.labels = c(&quot;Female&quot;), dep.var.labels = &quot;Voted for president&quot;, # you can cite the package in your References section, but it might be frustrating to see a citation every time you run stargazer...but you can just set it to header = FALSE and everything is okay header = FALSE) # ``` You’ll need to do this for your homework assignment! Now, you can create a second regression with some controls… # V165510: age group # V165511: education In reality, you should clean the variables like I did with the vote and gender variables. logit2 &lt;- glm(post.vote.binary ~ pre.female + V165510 + V165511, family = binomial, data = anes2016) # check out the table Here’s the GLM summary table. &gt; summary(logit2) Call: glm(formula = post.vote.binary ~ pre.female + V165510 + V165511, family = binomial, data = anes2016) Deviance Residuals: Min 1Q Median 3Q Max -3.0468 0.1590 0.1601 0.1817 0.2058 Coefficients: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) 4.1517 0.2530 16.412 &lt;2e-16 *** pre.female 0.2688 0.3236 0.831 0.406 V165510 0.1548 0.3269 0.473 0.636 V165511 -0.1266 0.2767 -0.458 0.647 --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 (Dispersion parameter for binomial family taken to be 1) Null deviance: 408.82 on 2729 degrees of freedom Residual deviance: 407.89 on 2726 degrees of freedom AIC: 415.89 Number of Fisher Scoring iterations: 7 Personally I like seeing the table in R first before I put it in R Markdown, but this is a matter of personal taste. stargazer(logit, logit2, type=&#39;text&#39;, title = &quot;Effect of gender on voting for president&quot;, covariate.labels = c(&quot;Female&quot;, &quot;Age&quot;, &quot;Education&quot;), dep.var.labels = &quot;Voted for president&quot;, header = FALSE) This is how it looks… Effect of gender on voting for president ============================================== Dependent variable: ---------------------------- Voted for president (1) (2) ---------------------------------------------- Female 0.271 0.269 (0.324) (0.324) Age 0.155 (0.327) Education -0.127 (0.277) Constant 4.100*** 4.152*** (0.220) (0.253) ---------------------------------------------- Observations 2,730 2,730 Log Likelihood -204.059 -203.945 Akaike Inf. Crit. 412.119 415.890 ============================================== Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 For log odds in a GLM table, you may want to convert the coefficients into odds ratios so they’re easier to interpret. To do this, I recommend Jorge Cimentada’s nifty function. I like tables but there are people out there who do not like tables. To appease society, you can use coefplots package or the tools in the modelsummary package. Here is an example of plotting coefficient plots in the modelsummary package. modelplot(ols) # change variable names on coefplot vars &lt;- c(&#39;pre.interest&#39; = &#39;Interest&#39;, &#39;pre.party&#39; = &#39;Party&#39;) Now for the graph… # ta-da! modelplot(ols, coef_map = vars) modelsummary-coefplot "],
["tools.html", "11 Tools", " 11 Tools In this lecture, you will learn how to use cool tools. "],
["replication.html", "12 Replication", " 12 Replication Here’s a replication project. "],
["github-pages.html", "13 GitHub Pages 13.1 What’s so great about GitHub Pages? 13.2 Who uses GitHub Pages? 13.3 Steps to get your GitHub Pages up &amp; running 13.4 Step 5: Fire up the Hugo server", " 13 GitHub Pages In this lecture, you will learn how to create a website in GitHub if you ever feel the need to show off. As you advance in your career as an academic, you may want to create a professional web presence. Of course, you are welcome to create a website using Wordpress, which is probably the easiest and least time-consuming way to have a web presence. But I see more GitHub Pages from political scientists popping up everyday and I fear that it may become some sort of signal in the discipline, like LaTeX and Beamer before it. So, here you will learn how to host a website on GitHub Pages. 13.1 What’s so great about GitHub Pages? Create content the same way you create R Markdown documents (you don’t have to learn anything new…kinda) Track your changes Create project pages You can signal that you know how to use GitHub Pages! 13.2 Who uses GitHub Pages? Tons of famous &amp; important people (mostly quantitative methodologists) in the discipline, including… Alexander Coppock Jorge Cimentada Anton Shirikov 13.3 Steps to get your GitHub Pages up &amp; running Here is how you become one of the elites. The best tutorials I’ve found thus far are: the official Hugo Quick Start tutorial the post by Ivy Markwell from Inside the Embassy Hugo and GitHub Pages Tutorial by Alex Leslie 13.3.1 Prerequisites You should have Git 2.8 installed on your machine. You should have a Github account. 13.3.2 Step 1: Install Hugo Serious academics seem to prefer Hugo because they can then use the Academic theme. 13.3.3 Mac Users You should definitely install homebrew. It’s a quick and easy tool that helps you install packages that do not exist on your Mac. After you install homebrew, you can install Hugo via the Terminal: brew install hugo You might want to verify that you have the latest version of hugo: hugo version 13.3.3.1 Windows users You should definitely install Chocolatey. It’s a quick and easy tool that helps you install packages that do not exist on your PC. After you install Chocolatey, you can install Hugo via the Command Line: choco install hugo -confirm You might want to verify that you have the latest version of hugo: hugo version 13.3.4 Step 2: Create site You want to create a new Hugo site on your computer. hugo new site hugo_site 13.3.5 Step 3: Add theme You want to pull a Hugo theme from the web and load it to the Hugo site on your computer. For the purpose of this demo, we will use the Ananke theme. You are free to pick whatever Hugo theme you want to use. Prior to this lesson, you have hopefully chosen the theme you would like to use. Enter the following into the terminal: cd hugo_site git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke Then you want to make sure the config file points to the ananke theme, so you enter some additional commands into the terminal: echo &#39;theme = &quot;ananke&quot;&#39; &gt;&gt; config.toml One thing I’ve noticed about changing themes for your Hugo website is that it can be pretty annoying. In essence, you need to copy the theme files whenever you download a new theme and change the config file to make sure it points to the new theme. But you might run into some issues with your existing site and need to revise a few files, etc. Anyway, we can obsess over this problem once it becomes a problem. 13.3.6 Step 4: Add content You want to add a page to your website. Enter the following command into the terminal: hugo new posts/my-first-post.md Here, you are telling Hugo to create a new post titled my-first-post.md to your Hugo site. Find the my-first-post.md file in your posts folder and add the following header to the file: --- title: &quot;My First Post&quot; date: 2019-03-26T08:47:11+01:00 draft: true --- As long as you put draft: true, the page will remained unpublished…until you set it to false, making it no longer a draft and giving Hugo permission to publish it. 13.4 Step 5: Fire up the Hugo server You want to start hosting your site on your computer. So you need to enter the following command into your terminal: hugo server -D Now you will be able to preview your site at http://localhost:1313/. You can continue making edits to existing posts and adding new posts, and you will be able to see the edits after you refresh your preview site. To stop previewing the site, go to the terminal and enter CTRL+C. If you do this, the site will still be in the browser, but you will no longer be able to refresh and preview updates to the site. 13.4.1 Step 6: Configure your site You have your site hosted on your computer, but what’s the point if no one else can see it but you? You need to start thinking about hosting your site on the web. Find your config.toml or config.yml file and edit the following: baseURL = &quot;https://[your-username].github.io&quot; languageCode = &quot;en-us&quot; title = &quot;[Your name]&quot; theme = &quot;[Your theme]&quot; Save the file. 13.4.2 Step 7: Build pages This might be a weird thing to have to wrap your head around, but there are two components of a GitHub Pages website: the one you edit the one people see You edit the .md files, but you want people to see the .html files. In order for people to see the public-facing files, you need to build them. To do so, you enter the following command into the terminal: hugo -D Then you will see a public folder of some sort in your folder. 13.4.3 Step 8: Create repositories on GitHub Create the following two repositories on your GitHub: website: contains the files you edit [your-username].github.io: contains the public-facing site 13.4.4 Step 9: Pull git repository on to your computer You want to pull the git repository that you will fill with the files you want to edit on to your computer. git clone https://github.com/[your-username]/website.git &gt; &amp;&amp; cd website Then you want to copy all the files from your hugo_site folder and paste it into the website folder. You want to make surer everything works, so you need to type the following command into the terminal: hugo server Again, you can go to http://localhost:1313 to preview your site and use CTRL+C to exit the preview. 13.4.5 Step 10: Change public-facing location To change where you want to host your public-facingn files, you need to remove the public folder in your website repository. You can do this by using the following command: rm -rf public 13.4.6 Step 11: Create public-facing location You will need to create a submodule, which allows you to include or embed repositories as a subfolder within another repository. To do this, you need to run the following command in the terminal: git submodule add -b master https://github.com/[your-username]/[your-username].github.io.git public In essence, the public site has now been “projected” on to your [your-username].github.io website. 13.4.7 Step 12: Execute changes You want to create a file named deploy.sh and put it in your website folder. Inside the deploy.sh file, insert the following. #!/bin/sh # If a command fails then the deploy stops set -e printf &quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n&quot; # Build the project. hugo # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=&quot;rebuilding site $(date)&quot; if [ -n &quot;$*&quot; ]; then msg=&quot;$*&quot; fi git commit -m &quot;$msg&quot; # Push source and build repos. git push origin master In the terminal, type in the following command, which makes it executable. In other words, it gives your computer permission to run the code inside the .sh file. chmod +x deploy.sh Then you run the following code to deploy your changes in the website folder onto your [your-username].github.io website: ./deploy.sh &quot;insert your commit message here&quot; 13.4.8 Step 13: Check out your site After your first commit, it may take up to 10 minutes for your new website to show up on [your-username].github.io. I’ve noticed that it takes a few minutes for changes to show up even after the first commit, so something to keep in mind. "],
["bookdown.html", "14 Bookdown", " 14 Bookdown Many people use Bookdown. In fact, many tutorials I’ve linked to for my lessons use Bookdown. Bookdown is great for writing lessons and replication materials. You can also publish RMarkdown documents right on to the web! Some would even suggest writing your papers/theses in Bookdown. Here are some examples of Bookdown pages: Bookdown official documentation Happy Git and GitHub for the useR R Markdown Features: A Compact Reference You may one day want to create tutorials or step-by-step replication materials for collaborators and/or people interested in your work. Bookdown is a great place to do it. To do this, you need to create a GitHub Project Pages. I am convinced that Julie Lowndes’ Bookdown tutorial is the best Bookdown tutorial out there. And I say this as someone who has scoured the web for Bookdown tutorials like a maniac. But I still had to make a few edits to her tutorial to “dumb it down” for myself. If it’s dumb enough for me, it’s hopefully dumb enough for all of us (lol). So here are some simple instructions for publishing your Bookdown site to GitHub Pages. Open R Studio. Go to File &gt; New Project. new-project Click on New Directory. project-type Select Book Project using bookdown. new-project-wizard Name the directory “book,” check “Open in New Session,” then click “Create Project.” Click on the “Build” pane. build-book Click on the “Build Book” button. Go to GitHub. Create a repository named “book.” Do not initiate a README file. Enter the following code into the Terminal pane in R Studio. This code shows up on the GitHub site if you don’t initiate a README file. It is helpful because you can just copy + paste to create the repository via the command line. echo &quot;# book&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git branch -M main git remote add origin https://github.com/[your-username]/book.git git push -u origin main Refresh GitHub. You should see an empty repository with the README.md file. Go back to R Studio. Click on the Git pane. You will see a bunch of files. Close RStudio. Reopen the book.Rproj file from your book directory. git-pane Go to the Git pane. Click on the “Commit” button, write a message in the textbox, and push. Then create a hidden .nojekyll file because you will not be using Jekyll. If you don’t do this step, you will not be able to access index.html. Type the following into the terminal: touch .nojekyll git add .nojekyll Commit, add commit message, then push. Go back to your repository on GitHub. You should see a bunch of files. Go to Settings. git-pages Go to GitHub Pages. Under Source, select “main.” Change “root” to “/docs.” Then click the “Save” button. files-pane Now go back to RStudio. Go to the Files pane. Rename the \"_book\" folder to “docs.” Commit the change, add a commit message, and push. Now go to https://[your-username].github.io/book. Everything should be there. You can go back to RStudio and edit the .Rmd files like you would any other R Markdown file. And, every time you make an edit, just: Go to the Build pane &gt; click Build Book Go to the Git pane &gt; stage files, commit, add commit message, and push. The cool thing about Bookdown is that you will be able to load everything on to a website, which could be helpful for collaboration and teaching. "]
]
